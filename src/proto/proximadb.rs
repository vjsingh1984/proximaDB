// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VectorRecord {
    /// Auto-generated if null
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    /// REQUIRED for inserts
    #[prost(float, repeated, tag = "2")]
    pub vector: ::prost::alloc::vec::Vec<f32>,
    /// Simplified - all values as strings
    #[prost(map = "string, string", tag = "3")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Microseconds since epoch
    #[prost(int64, optional, tag = "4")]
    pub timestamp: ::core::option::Option<i64>,
    /// For optimistic concurrency
    #[prost(int64, tag = "5")]
    pub version: i64,
    /// TTL support
    #[prost(int64, optional, tag = "6")]
    pub expires_at: ::core::option::Option<i64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CollectionConfig {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub dimension: i32,
    #[prost(enumeration = "DistanceMetric", tag = "3")]
    pub distance_metric: i32,
    #[prost(enumeration = "StorageEngine", tag = "4")]
    pub storage_engine: i32,
    #[prost(enumeration = "IndexingAlgorithm", tag = "5")]
    pub indexing_algorithm: i32,
    /// Legacy - simple field names
    #[prost(string, repeated, tag = "6")]
    pub filterable_metadata_fields: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    /// Algorithm-specific parameters
    #[prost(map = "string, string", tag = "7")]
    pub indexing_config: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Enhanced filterable column specs
    #[prost(message, repeated, tag = "8")]
    pub filterable_columns: ::prost::alloc::vec::Vec<FilterableColumnSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FilterableColumnSpec {
    /// Column name
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Data type for Parquet schema
    #[prost(enumeration = "FilterableDataType", tag = "2")]
    pub data_type: i32,
    /// Whether to create an index
    #[prost(bool, tag = "3")]
    pub indexed: bool,
    /// Whether this column supports range queries
    #[prost(bool, tag = "4")]
    pub supports_range: bool,
    /// Estimated cardinality for optimization
    #[prost(int32, optional, tag = "5")]
    pub estimated_cardinality: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Collection {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub config: ::core::option::Option<CollectionConfig>,
    #[prost(message, optional, tag = "3")]
    pub stats: ::core::option::Option<CollectionStats>,
    #[prost(int64, tag = "4")]
    pub created_at: i64,
    #[prost(int64, tag = "5")]
    pub updated_at: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CollectionStats {
    #[prost(int64, tag = "1")]
    pub vector_count: i64,
    #[prost(int64, tag = "2")]
    pub index_size_bytes: i64,
    #[prost(int64, tag = "3")]
    pub data_size_bytes: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchResult {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    /// REQUIRED
    #[prost(float, tag = "2")]
    pub score: f32,
    /// Optional - for network efficiency
    #[prost(float, repeated, tag = "3")]
    pub vector: ::prost::alloc::vec::Vec<f32>,
    /// Optional - for network efficiency
    #[prost(map = "string, string", tag = "4")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// 1-based ranking
    #[prost(int32, optional, tag = "5")]
    pub rank: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CollectionRequest {
    #[prost(enumeration = "CollectionOperation", tag = "1")]
    pub operation: i32,
    #[prost(string, optional, tag = "2")]
    pub collection_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub collection_config: ::core::option::Option<CollectionConfig>,
    /// limit, offset, filters, etc.
    #[prost(map = "string, string", tag = "4")]
    pub query_params: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// force, include_stats, etc.
    #[prost(map = "string, bool", tag = "5")]
    pub options: ::std::collections::HashMap<::prost::alloc::string::String, bool>,
    /// For MIGRATE operations
    #[prost(map = "string, string", tag = "6")]
    pub migration_config: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CollectionResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(enumeration = "CollectionOperation", tag = "2")]
    pub operation: i32,
    /// Single result (GET, CREATE)
    #[prost(message, optional, tag = "3")]
    pub collection: ::core::option::Option<Collection>,
    /// Multiple results (LIST)
    #[prost(message, repeated, tag = "4")]
    pub collections: ::prost::alloc::vec::Vec<Collection>,
    /// Items affected
    #[prost(int64, tag = "5")]
    pub affected_count: i64,
    /// For pagination
    #[prost(int64, optional, tag = "6")]
    pub total_count: ::core::option::Option<i64>,
    /// Additional response data
    #[prost(map = "string, string", tag = "7")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "8")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub error_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, tag = "10")]
    pub processing_time_us: i64,
}
/// ZERO-COPY INSERT - Uses Avro binary for vector data only
/// vectors_avro_payload format: Avro-serialized array of VectorRecord
/// VectorRecord: {id: string, vector: \[float\], metadata: {key: value}, timestamp?: int64, version?: int64}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VectorInsertRequest {
    /// Collection identifier (gRPC field)
    #[prost(string, tag = "1")]
    pub collection_id: ::prost::alloc::string::String,
    /// Insert vs upsert behavior (gRPC field)
    #[prost(bool, tag = "2")]
    pub upsert_mode: bool,
    /// Serialized vector data only (Avro binary)
    #[prost(bytes = "vec", tag = "3")]
    pub vectors_avro_payload: ::prost::alloc::vec::Vec<u8>,
    /// Optional batch processing timeout
    #[prost(int64, optional, tag = "4")]
    pub batch_timeout_ms: ::core::option::Option<i64>,
    /// Optional request tracking ID
    #[prost(string, optional, tag = "5")]
    pub request_id: ::core::option::Option<::prost::alloc::string::String>,
}
/// FLEXIBLE MUTATION - UPDATE and DELETE via regular gRPC
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VectorMutationRequest {
    #[prost(string, tag = "1")]
    pub collection_id: ::prost::alloc::string::String,
    #[prost(enumeration = "MutationType", tag = "2")]
    pub operation: i32,
    #[prost(message, optional, tag = "3")]
    pub selector: ::core::option::Option<VectorSelector>,
    /// null for DELETE
    #[prost(message, optional, tag = "4")]
    pub updates: ::core::option::Option<VectorUpdates>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VectorSelector {
    /// Select by IDs
    #[prost(string, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Select by metadata
    #[prost(map = "string, string", tag = "2")]
    pub metadata_filter: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Select by exact vector match
    #[prost(float, repeated, tag = "3")]
    pub vector_match: ::prost::alloc::vec::Vec<f32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VectorUpdates {
    /// New vector data
    #[prost(float, repeated, tag = "1")]
    pub vector: ::prost::alloc::vec::Vec<f32>,
    /// New metadata
    #[prost(map = "string, string", tag = "2")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// New expiration
    #[prost(int64, optional, tag = "3")]
    pub expires_at: ::core::option::Option<i64>,
}
/// FLEXIBLE SEARCH - Supports multiple query modes
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VectorSearchRequest {
    #[prost(string, tag = "1")]
    pub collection_id: ::prost::alloc::string::String,
    /// Batch search support
    #[prost(message, repeated, tag = "2")]
    pub queries: ::prost::alloc::vec::Vec<SearchQuery>,
    #[prost(int32, tag = "3")]
    pub top_k: i32,
    #[prost(enumeration = "DistanceMetric", optional, tag = "4")]
    pub distance_metric_override: ::core::option::Option<i32>,
    /// ef_search, nprobe, etc.
    #[prost(map = "string, string", tag = "5")]
    pub search_params: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(message, optional, tag = "6")]
    pub include_fields: ::core::option::Option<IncludeFields>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchQuery {
    /// Query vector
    #[prost(float, repeated, tag = "1")]
    pub vector: ::prost::alloc::vec::Vec<f32>,
    /// Search by ID
    #[prost(string, optional, tag = "2")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    /// Metadata filtering
    #[prost(map = "string, string", tag = "3")]
    pub metadata_filter: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IncludeFields {
    #[prost(bool, tag = "1")]
    pub vector: bool,
    #[prost(bool, tag = "2")]
    pub metadata: bool,
    #[prost(bool, tag = "3")]
    pub score: bool,
    #[prost(bool, tag = "4")]
    pub rank: bool,
}
/// UNIFIED RESPONSE - All vector operations with optimized data transfer
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VectorOperationResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(enumeration = "VectorOperation", tag = "2")]
    pub operation: i32,
    #[prost(message, optional, tag = "3")]
    pub metrics: ::core::option::Option<OperationMetrics>,
    /// Generated/affected IDs
    #[prost(string, repeated, tag = "6")]
    pub vector_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub error_code: ::core::option::Option<::prost::alloc::string::String>,
    /// Result metadata for client decision making
    #[prost(message, optional, tag = "9")]
    pub result_info: ::core::option::Option<ResultMetadata>,
    /// Optimized result transfer - choose based on data size and operation
    #[prost(oneof = "vector_operation_response::ResultPayload", tags = "4, 5")]
    pub result_payload: ::core::option::Option<vector_operation_response::ResultPayload>,
}
/// Nested message and enum types in `VectorOperationResponse`.
pub mod vector_operation_response {
    /// Optimized result transfer - choose based on data size and operation
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ResultPayload {
        /// Small results: regular gRPC
        #[prost(message, tag = "4")]
        CompactResults(super::SearchResultsCompact),
        /// Large results: Avro binary for zero-copy
        #[prost(bytes, tag = "5")]
        AvroResults(::prost::alloc::vec::Vec<u8>),
    }
}
/// Compact results for small datasets (< 1MB typical)
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchResultsCompact {
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<SearchResult>,
    #[prost(int64, tag = "2")]
    pub total_found: i64,
    #[prost(string, optional, tag = "3")]
    pub search_algorithm_used: ::core::option::Option<::prost::alloc::string::String>,
}
/// Metadata about the result payload
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResultMetadata {
    #[prost(int64, tag = "1")]
    pub result_count: i64,
    #[prost(int64, tag = "2")]
    pub estimated_size_bytes: i64,
    /// True if using avro_results field
    #[prost(bool, tag = "3")]
    pub is_avro_binary: bool,
    /// For Avro compatibility checking
    #[prost(string, tag = "4")]
    pub avro_schema_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetrics {
    #[prost(int64, tag = "1")]
    pub total_processed: i64,
    #[prost(int64, tag = "2")]
    pub successful_count: i64,
    #[prost(int64, tag = "3")]
    pub failed_count: i64,
    /// For UPSERT
    #[prost(int64, tag = "4")]
    pub updated_count: i64,
    #[prost(int64, tag = "5")]
    pub processing_time_us: i64,
    #[prost(int64, tag = "6")]
    pub wal_write_time_us: i64,
    #[prost(int64, tag = "7")]
    pub index_update_time_us: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthResponse {
    /// "healthy", "degraded", "unhealthy"
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub uptime_seconds: i64,
    #[prost(int32, tag = "4")]
    pub active_connections: i32,
    #[prost(int64, tag = "5")]
    pub memory_usage_bytes: i64,
    #[prost(int64, tag = "6")]
    pub storage_usage_bytes: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricsRequest {
    /// Filter by collection
    #[prost(string, optional, tag = "1")]
    pub collection_id: ::core::option::Option<::prost::alloc::string::String>,
    /// Specific metrics to retrieve
    #[prost(string, repeated, tag = "2")]
    pub metric_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricsResponse {
    /// metric_name -> value
    #[prost(map = "string, double", tag = "1")]
    pub metrics: ::std::collections::HashMap<::prost::alloc::string::String, f64>,
    /// When metrics were collected
    #[prost(int64, tag = "2")]
    pub timestamp: i64,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DistanceMetric {
    Unspecified = 0,
    Cosine = 1,
    Euclidean = 2,
    DotProduct = 3,
    Hamming = 4,
}
impl DistanceMetric {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DistanceMetric::Unspecified => "DISTANCE_METRIC_UNSPECIFIED",
            DistanceMetric::Cosine => "COSINE",
            DistanceMetric::Euclidean => "EUCLIDEAN",
            DistanceMetric::DotProduct => "DOT_PRODUCT",
            DistanceMetric::Hamming => "HAMMING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DISTANCE_METRIC_UNSPECIFIED" => Some(Self::Unspecified),
            "COSINE" => Some(Self::Cosine),
            "EUCLIDEAN" => Some(Self::Euclidean),
            "DOT_PRODUCT" => Some(Self::DotProduct),
            "HAMMING" => Some(Self::Hamming),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StorageEngine {
    Unspecified = 0,
    Viper = 1,
    Lsm = 2,
    Mmap = 3,
    Hybrid = 4,
}
impl StorageEngine {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            StorageEngine::Unspecified => "STORAGE_ENGINE_UNSPECIFIED",
            StorageEngine::Viper => "VIPER",
            StorageEngine::Lsm => "LSM",
            StorageEngine::Mmap => "MMAP",
            StorageEngine::Hybrid => "HYBRID",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STORAGE_ENGINE_UNSPECIFIED" => Some(Self::Unspecified),
            "VIPER" => Some(Self::Viper),
            "LSM" => Some(Self::Lsm),
            "MMAP" => Some(Self::Mmap),
            "HYBRID" => Some(Self::Hybrid),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum IndexingAlgorithm {
    Unspecified = 0,
    Hnsw = 1,
    Ivf = 2,
    Pq = 3,
    Flat = 4,
    Annoy = 5,
}
impl IndexingAlgorithm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            IndexingAlgorithm::Unspecified => "INDEXING_ALGORITHM_UNSPECIFIED",
            IndexingAlgorithm::Hnsw => "HNSW",
            IndexingAlgorithm::Ivf => "IVF",
            IndexingAlgorithm::Pq => "PQ",
            IndexingAlgorithm::Flat => "FLAT",
            IndexingAlgorithm::Annoy => "ANNOY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "INDEXING_ALGORITHM_UNSPECIFIED" => Some(Self::Unspecified),
            "HNSW" => Some(Self::Hnsw),
            "IVF" => Some(Self::Ivf),
            "PQ" => Some(Self::Pq),
            "FLAT" => Some(Self::Flat),
            "ANNOY" => Some(Self::Annoy),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CollectionOperation {
    Unspecified = 0,
    CollectionCreate = 1,
    CollectionUpdate = 2,
    CollectionGet = 3,
    CollectionList = 4,
    CollectionDelete = 5,
    CollectionMigrate = 6,
    /// Get collection UUID by name
    CollectionGetIdByName = 7,
}
impl CollectionOperation {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CollectionOperation::Unspecified => "COLLECTION_OPERATION_UNSPECIFIED",
            CollectionOperation::CollectionCreate => "COLLECTION_CREATE",
            CollectionOperation::CollectionUpdate => "COLLECTION_UPDATE",
            CollectionOperation::CollectionGet => "COLLECTION_GET",
            CollectionOperation::CollectionList => "COLLECTION_LIST",
            CollectionOperation::CollectionDelete => "COLLECTION_DELETE",
            CollectionOperation::CollectionMigrate => "COLLECTION_MIGRATE",
            CollectionOperation::CollectionGetIdByName => "COLLECTION_GET_ID_BY_NAME",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "COLLECTION_OPERATION_UNSPECIFIED" => Some(Self::Unspecified),
            "COLLECTION_CREATE" => Some(Self::CollectionCreate),
            "COLLECTION_UPDATE" => Some(Self::CollectionUpdate),
            "COLLECTION_GET" => Some(Self::CollectionGet),
            "COLLECTION_LIST" => Some(Self::CollectionList),
            "COLLECTION_DELETE" => Some(Self::CollectionDelete),
            "COLLECTION_MIGRATE" => Some(Self::CollectionMigrate),
            "COLLECTION_GET_ID_BY_NAME" => Some(Self::CollectionGetIdByName),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VectorOperation {
    Unspecified = 0,
    VectorInsert = 1,
    VectorUpsert = 2,
    VectorUpdate = 3,
    VectorDelete = 4,
    VectorSearch = 5,
}
impl VectorOperation {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            VectorOperation::Unspecified => "VECTOR_OPERATION_UNSPECIFIED",
            VectorOperation::VectorInsert => "VECTOR_INSERT",
            VectorOperation::VectorUpsert => "VECTOR_UPSERT",
            VectorOperation::VectorUpdate => "VECTOR_UPDATE",
            VectorOperation::VectorDelete => "VECTOR_DELETE",
            VectorOperation::VectorSearch => "VECTOR_SEARCH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VECTOR_OPERATION_UNSPECIFIED" => Some(Self::Unspecified),
            "VECTOR_INSERT" => Some(Self::VectorInsert),
            "VECTOR_UPSERT" => Some(Self::VectorUpsert),
            "VECTOR_UPDATE" => Some(Self::VectorUpdate),
            "VECTOR_DELETE" => Some(Self::VectorDelete),
            "VECTOR_SEARCH" => Some(Self::VectorSearch),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MutationType {
    Unspecified = 0,
    MutationUpdate = 1,
    /// Sets expires_at to current time
    MutationDelete = 2,
}
impl MutationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MutationType::Unspecified => "MUTATION_TYPE_UNSPECIFIED",
            MutationType::MutationUpdate => "MUTATION_UPDATE",
            MutationType::MutationDelete => "MUTATION_DELETE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MUTATION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "MUTATION_UPDATE" => Some(Self::MutationUpdate),
            "MUTATION_DELETE" => Some(Self::MutationDelete),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FilterableDataType {
    Unspecified = 0,
    FilterableString = 1,
    FilterableInteger = 2,
    FilterableFloat = 3,
    FilterableBoolean = 4,
    FilterableDatetime = 5,
    FilterableArrayString = 6,
    FilterableArrayInteger = 7,
    FilterableArrayFloat = 8,
}
impl FilterableDataType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            FilterableDataType::Unspecified => "FILTERABLE_DATA_TYPE_UNSPECIFIED",
            FilterableDataType::FilterableString => "FILTERABLE_STRING",
            FilterableDataType::FilterableInteger => "FILTERABLE_INTEGER",
            FilterableDataType::FilterableFloat => "FILTERABLE_FLOAT",
            FilterableDataType::FilterableBoolean => "FILTERABLE_BOOLEAN",
            FilterableDataType::FilterableDatetime => "FILTERABLE_DATETIME",
            FilterableDataType::FilterableArrayString => "FILTERABLE_ARRAY_STRING",
            FilterableDataType::FilterableArrayInteger => "FILTERABLE_ARRAY_INTEGER",
            FilterableDataType::FilterableArrayFloat => "FILTERABLE_ARRAY_FLOAT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FILTERABLE_DATA_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "FILTERABLE_STRING" => Some(Self::FilterableString),
            "FILTERABLE_INTEGER" => Some(Self::FilterableInteger),
            "FILTERABLE_FLOAT" => Some(Self::FilterableFloat),
            "FILTERABLE_BOOLEAN" => Some(Self::FilterableBoolean),
            "FILTERABLE_DATETIME" => Some(Self::FilterableDatetime),
            "FILTERABLE_ARRAY_STRING" => Some(Self::FilterableArrayString),
            "FILTERABLE_ARRAY_INTEGER" => Some(Self::FilterableArrayInteger),
            "FILTERABLE_ARRAY_FLOAT" => Some(Self::FilterableArrayFloat),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod proxima_db_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ProximaDbClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ProximaDbClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ProximaDbClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ProximaDbClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ProximaDbClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Collection management - single unified endpoint for flexibility
        pub async fn collection_operation(
            &mut self,
            request: impl tonic::IntoRequest<super::CollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CollectionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.ProximaDB/CollectionOperation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.ProximaDB", "CollectionOperation"));
            self.inner.unary(req, path, codec).await
        }
        /// Vector operations - optimized by use case
        pub async fn vector_insert(
            &mut self,
            request: impl tonic::IntoRequest<super::VectorInsertRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VectorOperationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.ProximaDB/VectorInsert",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.ProximaDB", "VectorInsert"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn vector_mutation(
            &mut self,
            request: impl tonic::IntoRequest<super::VectorMutationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VectorOperationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.ProximaDB/VectorMutation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.ProximaDB", "VectorMutation"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn vector_search(
            &mut self,
            request: impl tonic::IntoRequest<super::VectorSearchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VectorOperationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.ProximaDB/VectorSearch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.ProximaDB", "VectorSearch"));
            self.inner.unary(req, path, codec).await
        }
        /// Health and monitoring
        pub async fn health(
            &mut self,
            request: impl tonic::IntoRequest<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.ProximaDB/Health",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.ProximaDB", "Health"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_metrics(
            &mut self,
            request: impl tonic::IntoRequest<super::MetricsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MetricsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.ProximaDB/GetMetrics",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.ProximaDB", "GetMetrics"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod proxima_db_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ProximaDbServer.
    #[async_trait]
    pub trait ProximaDb: Send + Sync + 'static {
        /// Collection management - single unified endpoint for flexibility
        async fn collection_operation(
            &self,
            request: tonic::Request<super::CollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CollectionResponse>,
            tonic::Status,
        >;
        /// Vector operations - optimized by use case
        async fn vector_insert(
            &self,
            request: tonic::Request<super::VectorInsertRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VectorOperationResponse>,
            tonic::Status,
        >;
        async fn vector_mutation(
            &self,
            request: tonic::Request<super::VectorMutationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VectorOperationResponse>,
            tonic::Status,
        >;
        async fn vector_search(
            &self,
            request: tonic::Request<super::VectorSearchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VectorOperationResponse>,
            tonic::Status,
        >;
        /// Health and monitoring
        async fn health(
            &self,
            request: tonic::Request<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status>;
        async fn get_metrics(
            &self,
            request: tonic::Request<super::MetricsRequest>,
        ) -> std::result::Result<tonic::Response<super::MetricsResponse>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct ProximaDbServer<T: ProximaDb> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: ProximaDb> ProximaDbServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ProximaDbServer<T>
    where
        T: ProximaDb,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/proximadb.ProximaDB/CollectionOperation" => {
                    #[allow(non_camel_case_types)]
                    struct CollectionOperationSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::CollectionRequest>
                    for CollectionOperationSvc<T> {
                        type Response = super::CollectionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CollectionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::collection_operation(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CollectionOperationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.ProximaDB/VectorInsert" => {
                    #[allow(non_camel_case_types)]
                    struct VectorInsertSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::VectorInsertRequest>
                    for VectorInsertSvc<T> {
                        type Response = super::VectorOperationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VectorInsertRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::vector_insert(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = VectorInsertSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.ProximaDB/VectorMutation" => {
                    #[allow(non_camel_case_types)]
                    struct VectorMutationSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::VectorMutationRequest>
                    for VectorMutationSvc<T> {
                        type Response = super::VectorOperationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VectorMutationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::vector_mutation(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = VectorMutationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.ProximaDB/VectorSearch" => {
                    #[allow(non_camel_case_types)]
                    struct VectorSearchSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::VectorSearchRequest>
                    for VectorSearchSvc<T> {
                        type Response = super::VectorOperationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VectorSearchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::vector_search(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = VectorSearchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.ProximaDB/Health" => {
                    #[allow(non_camel_case_types)]
                    struct HealthSvc<T: ProximaDb>(pub Arc<T>);
                    impl<T: ProximaDb> tonic::server::UnaryService<super::HealthRequest>
                    for HealthSvc<T> {
                        type Response = super::HealthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HealthRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::health(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = HealthSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.ProximaDB/GetMetrics" => {
                    #[allow(non_camel_case_types)]
                    struct GetMetricsSvc<T: ProximaDb>(pub Arc<T>);
                    impl<T: ProximaDb> tonic::server::UnaryService<super::MetricsRequest>
                    for GetMetricsSvc<T> {
                        type Response = super::MetricsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MetricsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::get_metrics(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetMetricsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: ProximaDb> Clone for ProximaDbServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: ProximaDb> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: ProximaDb> tonic::server::NamedService for ProximaDbServer<T> {
        const NAME: &'static str = "proximadb.ProximaDB";
    }
}
