// This file is @generated by prost-build.
/// Core Data Types
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Vector {
    /// Server-generated UUID or client-provided ID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Vector values
    #[prost(float, repeated, tag = "2")]
    pub values: ::prost::alloc::vec::Vec<f32>,
    /// Arbitrary metadata
    #[prost(message, optional, tag = "3")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
    /// Optional client-provided ID (stored in metadata)
    #[prost(string, tag = "4")]
    pub client_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "6")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Collection {
    /// Server-generated UUID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Human-readable name
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// Vector dimension
    #[prost(uint32, tag = "3")]
    pub dimension: u32,
    /// "cosine", "euclidean", "manhattan", "dot_product"
    #[prost(string, tag = "4")]
    pub distance_metric: ::prost::alloc::string::String,
    /// "hnsw", "flat", "ivf"
    #[prost(string, tag = "5")]
    pub indexing_algorithm: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Number of vectors
    #[prost(uint64, tag = "8")]
    pub vector_count: u64,
    /// Storage size
    #[prost(uint64, tag = "9")]
    pub total_size_bytes: u64,
    /// Additional configuration
    #[prost(message, optional, tag = "10")]
    pub config: ::core::option::Option<::prost_types::Struct>,
    /// Storage layout: "viper" (default), "lsm", "rocksdb", "memory"
    #[prost(string, tag = "11")]
    pub storage_layout: ::prost::alloc::string::String,
    /// VIPER optimization: up to 16 metadata fields
    #[prost(string, repeated, tag = "12")]
    pub filterable_metadata_fields: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchResult {
    /// Vector ID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Similarity score
    #[prost(float, tag = "2")]
    pub score: f32,
    /// Optional: return vector values
    #[prost(float, repeated, tag = "3")]
    pub vector: ::prost::alloc::vec::Vec<f32>,
    /// Vector metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
    /// Client ID if available
    #[prost(string, tag = "5")]
    pub client_id: ::prost::alloc::string::String,
}
/// Collection Messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateCollectionRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub dimension: u32,
    /// "cosine", "euclidean", "manhattan", "dot_product"
    #[prost(string, tag = "3")]
    pub distance_metric: ::prost::alloc::string::String,
    /// "hnsw", "flat", "ivf"
    #[prost(string, tag = "4")]
    pub indexing_algorithm: ::prost::alloc::string::String,
    /// Storage layout: "viper" (default), "lsm", "rocksdb", "memory"
    #[prost(string, tag = "5")]
    pub storage_layout: ::prost::alloc::string::String,
    /// Additional configuration
    #[prost(message, optional, tag = "6")]
    pub config: ::core::option::Option<::prost_types::Struct>,
    /// VIPER optimization: up to 16 metadata fields
    #[prost(string, repeated, tag = "7")]
    pub filterable_metadata_fields: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    /// WAL flush configuration (optional, uses global defaults)
    #[prost(double, tag = "8")]
    pub max_wal_size_mb: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateCollectionResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub collection: ::core::option::Option<Collection>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCollectionRequest {
    #[prost(oneof = "get_collection_request::Identifier", tags = "1, 2")]
    pub identifier: ::core::option::Option<get_collection_request::Identifier>,
}
/// Nested message and enum types in `GetCollectionRequest`.
pub mod get_collection_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Identifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCollectionResponse {
    #[prost(message, optional, tag = "1")]
    pub collection: ::core::option::Option<Collection>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCollectionsRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCollectionsResponse {
    #[prost(message, repeated, tag = "1")]
    pub collections: ::prost::alloc::vec::Vec<Collection>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteCollectionRequest {
    #[prost(oneof = "delete_collection_request::Identifier", tags = "1, 2")]
    pub identifier: ::core::option::Option<delete_collection_request::Identifier>,
}
/// Nested message and enum types in `DeleteCollectionRequest`.
pub mod delete_collection_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Identifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteCollectionResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Collection Helper Messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCollectionIdsRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCollectionIdsResponse {
    #[prost(string, repeated, tag = "1")]
    pub collection_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCollectionNamesRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCollectionNamesResponse {
    #[prost(string, repeated, tag = "1")]
    pub collection_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCollectionIdByNameRequest {
    #[prost(string, tag = "1")]
    pub collection_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCollectionIdByNameResponse {
    #[prost(string, tag = "1")]
    pub collection_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCollectionNameByIdRequest {
    #[prost(string, tag = "1")]
    pub collection_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCollectionNameByIdResponse {
    #[prost(string, tag = "1")]
    pub collection_name: ::prost::alloc::string::String,
}
/// Vector Operations - Single
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertVectorRequest {
    /// Optional client-provided ID
    #[prost(string, tag = "3")]
    pub client_id: ::prost::alloc::string::String,
    /// Vector values
    #[prost(float, repeated, tag = "4")]
    pub vector: ::prost::alloc::vec::Vec<f32>,
    /// Optional metadata
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
    #[prost(oneof = "insert_vector_request::CollectionIdentifier", tags = "1, 2")]
    pub collection_identifier: ::core::option::Option<
        insert_vector_request::CollectionIdentifier,
    >,
}
/// Nested message and enum types in `InsertVectorRequest`.
pub mod insert_vector_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CollectionIdentifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertVectorResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// Server-generated UUID
    #[prost(string, tag = "3")]
    pub vector_id: ::prost::alloc::string::String,
    /// Client-provided ID if any
    #[prost(string, tag = "4")]
    pub client_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVectorRequest {
    /// Server UUID
    #[prost(string, tag = "3")]
    pub vector_id: ::prost::alloc::string::String,
    #[prost(oneof = "get_vector_request::CollectionIdentifier", tags = "1, 2")]
    pub collection_identifier: ::core::option::Option<
        get_vector_request::CollectionIdentifier,
    >,
}
/// Nested message and enum types in `GetVectorRequest`.
pub mod get_vector_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CollectionIdentifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVectorResponse {
    #[prost(message, optional, tag = "1")]
    pub vector: ::core::option::Option<Vector>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVectorByClientIdRequest {
    /// Client-provided ID
    #[prost(string, tag = "3")]
    pub client_id: ::prost::alloc::string::String,
    #[prost(
        oneof = "get_vector_by_client_id_request::CollectionIdentifier",
        tags = "1, 2"
    )]
    pub collection_identifier: ::core::option::Option<
        get_vector_by_client_id_request::CollectionIdentifier,
    >,
}
/// Nested message and enum types in `GetVectorByClientIdRequest`.
pub mod get_vector_by_client_id_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CollectionIdentifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVectorByClientIdResponse {
    #[prost(message, optional, tag = "1")]
    pub vector: ::core::option::Option<Vector>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateVectorRequest {
    /// Server UUID
    #[prost(string, tag = "3")]
    pub vector_id: ::prost::alloc::string::String,
    /// New vector values
    #[prost(float, repeated, tag = "4")]
    pub vector: ::prost::alloc::vec::Vec<f32>,
    /// New metadata
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
    #[prost(oneof = "update_vector_request::CollectionIdentifier", tags = "1, 2")]
    pub collection_identifier: ::core::option::Option<
        update_vector_request::CollectionIdentifier,
    >,
}
/// Nested message and enum types in `UpdateVectorRequest`.
pub mod update_vector_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CollectionIdentifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateVectorResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// Updated vector
    #[prost(message, optional, tag = "3")]
    pub vector: ::core::option::Option<Vector>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteVectorRequest {
    /// Server UUID
    #[prost(string, tag = "3")]
    pub vector_id: ::prost::alloc::string::String,
    #[prost(oneof = "delete_vector_request::CollectionIdentifier", tags = "1, 2")]
    pub collection_identifier: ::core::option::Option<
        delete_vector_request::CollectionIdentifier,
    >,
}
/// Nested message and enum types in `DeleteVectorRequest`.
pub mod delete_vector_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CollectionIdentifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteVectorResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Vector Operations - Batch
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchInsertRequest {
    #[prost(message, repeated, tag = "3")]
    pub vectors: ::prost::alloc::vec::Vec<InsertVectorData>,
    #[prost(oneof = "batch_insert_request::CollectionIdentifier", tags = "1, 2")]
    pub collection_identifier: ::core::option::Option<
        batch_insert_request::CollectionIdentifier,
    >,
}
/// Nested message and enum types in `BatchInsertRequest`.
pub mod batch_insert_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CollectionIdentifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertVectorData {
    /// Optional client-provided ID
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
    /// Vector values
    #[prost(float, repeated, tag = "2")]
    pub vector: ::prost::alloc::vec::Vec<f32>,
    /// Optional metadata
    #[prost(message, optional, tag = "3")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchInsertResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// Server-generated UUIDs
    #[prost(string, repeated, tag = "3")]
    pub vector_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Client-provided IDs
    #[prost(string, repeated, tag = "4")]
    pub client_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "5")]
    pub inserted_count: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchGetRequest {
    /// Server UUIDs
    #[prost(string, repeated, tag = "3")]
    pub vector_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(oneof = "batch_get_request::CollectionIdentifier", tags = "1, 2")]
    pub collection_identifier: ::core::option::Option<
        batch_get_request::CollectionIdentifier,
    >,
}
/// Nested message and enum types in `BatchGetRequest`.
pub mod batch_get_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CollectionIdentifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchGetResponse {
    #[prost(message, repeated, tag = "1")]
    pub vectors: ::prost::alloc::vec::Vec<Vector>,
    #[prost(uint32, tag = "2")]
    pub found_count: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchUpdateRequest {
    #[prost(message, repeated, tag = "3")]
    pub updates: ::prost::alloc::vec::Vec<UpdateVectorData>,
    #[prost(oneof = "batch_update_request::CollectionIdentifier", tags = "1, 2")]
    pub collection_identifier: ::core::option::Option<
        batch_update_request::CollectionIdentifier,
    >,
}
/// Nested message and enum types in `BatchUpdateRequest`.
pub mod batch_update_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CollectionIdentifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateVectorData {
    /// Server UUID
    #[prost(string, tag = "1")]
    pub vector_id: ::prost::alloc::string::String,
    /// New vector values
    #[prost(float, repeated, tag = "2")]
    pub vector: ::prost::alloc::vec::Vec<f32>,
    /// New metadata
    #[prost(message, optional, tag = "3")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchUpdateResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub updated_count: u32,
    /// Updated vectors
    #[prost(message, repeated, tag = "4")]
    pub vectors: ::prost::alloc::vec::Vec<Vector>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchDeleteRequest {
    /// Server UUIDs
    #[prost(string, repeated, tag = "3")]
    pub vector_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Optional: delete by metadata filter
    #[prost(message, optional, tag = "4")]
    pub metadata_filter: ::core::option::Option<::prost_types::Struct>,
    #[prost(oneof = "batch_delete_request::CollectionIdentifier", tags = "1, 2")]
    pub collection_identifier: ::core::option::Option<
        batch_delete_request::CollectionIdentifier,
    >,
}
/// Nested message and enum types in `BatchDeleteRequest`.
pub mod batch_delete_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CollectionIdentifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchDeleteResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub deleted_count: u32,
}
/// Search Operations
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchRequest {
    /// Query vector
    #[prost(float, repeated, tag = "3")]
    pub query_vector: ::prost::alloc::vec::Vec<f32>,
    /// Number of results
    #[prost(uint32, tag = "4")]
    pub top_k: u32,
    /// Optional metadata filtering
    #[prost(message, optional, tag = "5")]
    pub metadata_filter: ::core::option::Option<::prost_types::Struct>,
    /// Optional similarity threshold
    #[prost(float, tag = "6")]
    pub threshold: f32,
    /// Whether to include vector values in results
    #[prost(bool, tag = "7")]
    pub include_vectors: bool,
    #[prost(oneof = "search_request::CollectionIdentifier", tags = "1, 2")]
    pub collection_identifier: ::core::option::Option<
        search_request::CollectionIdentifier,
    >,
}
/// Nested message and enum types in `SearchRequest`.
pub mod search_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CollectionIdentifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchResponse {
    #[prost(message, repeated, tag = "1")]
    pub matches: ::prost::alloc::vec::Vec<SearchResult>,
    #[prost(uint32, tag = "2")]
    pub total_count: u32,
    /// Query execution time
    #[prost(float, tag = "3")]
    pub query_time_ms: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchSearchRequest {
    #[prost(message, repeated, tag = "3")]
    pub queries: ::prost::alloc::vec::Vec<SearchQuery>,
    #[prost(oneof = "batch_search_request::CollectionIdentifier", tags = "1, 2")]
    pub collection_identifier: ::core::option::Option<
        batch_search_request::CollectionIdentifier,
    >,
}
/// Nested message and enum types in `BatchSearchRequest`.
pub mod batch_search_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CollectionIdentifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchQuery {
    /// Query vector
    #[prost(float, repeated, tag = "1")]
    pub query_vector: ::prost::alloc::vec::Vec<f32>,
    /// Number of results
    #[prost(uint32, tag = "2")]
    pub top_k: u32,
    /// Optional metadata filtering
    #[prost(message, optional, tag = "3")]
    pub metadata_filter: ::core::option::Option<::prost_types::Struct>,
    /// Optional similarity threshold
    #[prost(float, tag = "4")]
    pub threshold: f32,
    /// Whether to include vector values in results
    #[prost(bool, tag = "5")]
    pub include_vectors: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchSearchResponse {
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<SearchResponse>,
    /// Total execution time
    #[prost(float, tag = "2")]
    pub total_query_time_ms: f32,
}
/// Index Operations
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIndexStatsRequest {
    #[prost(oneof = "get_index_stats_request::CollectionIdentifier", tags = "1, 2")]
    pub collection_identifier: ::core::option::Option<
        get_index_stats_request::CollectionIdentifier,
    >,
}
/// Nested message and enum types in `GetIndexStatsRequest`.
pub mod get_index_stats_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CollectionIdentifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIndexStatsResponse {
    #[prost(string, tag = "1")]
    pub collection_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub vector_count: u64,
    #[prost(uint64, tag = "4")]
    pub index_size_bytes: u64,
    #[prost(string, tag = "5")]
    pub index_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub index_config: ::core::option::Option<::prost_types::Struct>,
    #[prost(message, optional, tag = "7")]
    pub last_optimized: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "8")]
    pub performance_metrics: ::core::option::Option<::prost_types::Struct>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptimizeIndexRequest {
    /// Force full index rebuild
    #[prost(bool, tag = "3")]
    pub force_rebuild: bool,
    #[prost(oneof = "optimize_index_request::CollectionIdentifier", tags = "1, 2")]
    pub collection_identifier: ::core::option::Option<
        optimize_index_request::CollectionIdentifier,
    >,
}
/// Nested message and enum types in `OptimizeIndexRequest`.
pub mod optimize_index_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CollectionIdentifier {
        #[prost(string, tag = "1")]
        CollectionId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        CollectionName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptimizeIndexResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(float, tag = "3")]
    pub optimization_time_ms: f32,
    #[prost(message, optional, tag = "4")]
    pub optimization_stats: ::core::option::Option<::prost_types::Struct>,
}
/// Health and Status
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthResponse {
    /// "healthy", "unhealthy", "degraded"
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "3")]
    pub version: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub details: ::core::option::Option<::prost_types::Struct>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadinessRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadinessResponse {
    #[prost(bool, tag = "1")]
    pub ready: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LivenessRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LivenessResponse {
    #[prost(bool, tag = "1")]
    pub alive: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusResponse {
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub build_info: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub uptime_seconds: u64,
    #[prost(message, optional, tag = "4")]
    pub system_info: ::core::option::Option<::prost_types::Struct>,
    #[prost(message, optional, tag = "5")]
    pub performance_metrics: ::core::option::Option<::prost_types::Struct>,
    #[prost(message, optional, tag = "6")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// Generated client implementations.
pub mod proxima_db_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ProximaDbClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ProximaDbClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ProximaDbClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ProximaDbClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ProximaDbClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Collection management
        pub async fn create_collection(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateCollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateCollectionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/CreateCollection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "CreateCollection"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_collection(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCollectionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/GetCollection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "GetCollection"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_collections(
            &mut self,
            request: impl tonic::IntoRequest<super::ListCollectionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListCollectionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/ListCollections",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "ListCollections"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_collection(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteCollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteCollectionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/DeleteCollection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "DeleteCollection"));
            self.inner.unary(req, path, codec).await
        }
        /// Collection helper endpoints
        pub async fn list_collection_ids(
            &mut self,
            request: impl tonic::IntoRequest<super::ListCollectionIdsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListCollectionIdsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/ListCollectionIds",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "ListCollectionIds"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_collection_names(
            &mut self,
            request: impl tonic::IntoRequest<super::ListCollectionNamesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListCollectionNamesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/ListCollectionNames",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("proximadb.v1.ProximaDB", "ListCollectionNames"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_collection_id_by_name(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCollectionIdByNameRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCollectionIdByNameResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/GetCollectionIdByName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("proximadb.v1.ProximaDB", "GetCollectionIdByName"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_collection_name_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCollectionNameByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCollectionNameByIdResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/GetCollectionNameById",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("proximadb.v1.ProximaDB", "GetCollectionNameById"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Vector operations - single
        pub async fn insert_vector(
            &mut self,
            request: impl tonic::IntoRequest<super::InsertVectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InsertVectorResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/InsertVector",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "InsertVector"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_vector(
            &mut self,
            request: impl tonic::IntoRequest<super::GetVectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetVectorResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/GetVector",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "GetVector"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_vector_by_client_id(
            &mut self,
            request: impl tonic::IntoRequest<super::GetVectorByClientIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetVectorByClientIdResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/GetVectorByClientId",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("proximadb.v1.ProximaDB", "GetVectorByClientId"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_vector(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateVectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateVectorResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/UpdateVector",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "UpdateVector"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_vector(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteVectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteVectorResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/DeleteVector",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "DeleteVector"));
            self.inner.unary(req, path, codec).await
        }
        /// Vector operations - batch
        pub async fn batch_insert(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchInsertRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchInsertResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/BatchInsert",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "BatchInsert"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn batch_get(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchGetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchGetResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/BatchGet",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "BatchGet"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn batch_update(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchUpdateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchUpdateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/BatchUpdate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "BatchUpdate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn batch_delete(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchDeleteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchDeleteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/BatchDelete",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "BatchDelete"));
            self.inner.unary(req, path, codec).await
        }
        /// Search operations
        pub async fn search(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchRequest>,
        ) -> std::result::Result<tonic::Response<super::SearchResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/Search",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "Search"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn batch_search(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchSearchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchSearchResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/BatchSearch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "BatchSearch"));
            self.inner.unary(req, path, codec).await
        }
        /// Index operations
        pub async fn get_index_stats(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIndexStatsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIndexStatsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/GetIndexStats",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "GetIndexStats"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn optimize_index(
            &mut self,
            request: impl tonic::IntoRequest<super::OptimizeIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OptimizeIndexResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/OptimizeIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "OptimizeIndex"));
            self.inner.unary(req, path, codec).await
        }
        /// Health and status
        pub async fn health(
            &mut self,
            request: impl tonic::IntoRequest<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/Health",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "Health"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn readiness(
            &mut self,
            request: impl tonic::IntoRequest<super::ReadinessRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadinessResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/Readiness",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "Readiness"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn liveness(
            &mut self,
            request: impl tonic::IntoRequest<super::LivenessRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LivenessResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/Liveness",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "Liveness"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn status(
            &mut self,
            request: impl tonic::IntoRequest<super::StatusRequest>,
        ) -> std::result::Result<tonic::Response<super::StatusResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proximadb.v1.ProximaDB/Status",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proximadb.v1.ProximaDB", "Status"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod proxima_db_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ProximaDbServer.
    #[async_trait]
    pub trait ProximaDb: Send + Sync + 'static {
        /// Collection management
        async fn create_collection(
            &self,
            request: tonic::Request<super::CreateCollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateCollectionResponse>,
            tonic::Status,
        >;
        async fn get_collection(
            &self,
            request: tonic::Request<super::GetCollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCollectionResponse>,
            tonic::Status,
        >;
        async fn list_collections(
            &self,
            request: tonic::Request<super::ListCollectionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListCollectionsResponse>,
            tonic::Status,
        >;
        async fn delete_collection(
            &self,
            request: tonic::Request<super::DeleteCollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteCollectionResponse>,
            tonic::Status,
        >;
        /// Collection helper endpoints
        async fn list_collection_ids(
            &self,
            request: tonic::Request<super::ListCollectionIdsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListCollectionIdsResponse>,
            tonic::Status,
        >;
        async fn list_collection_names(
            &self,
            request: tonic::Request<super::ListCollectionNamesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListCollectionNamesResponse>,
            tonic::Status,
        >;
        async fn get_collection_id_by_name(
            &self,
            request: tonic::Request<super::GetCollectionIdByNameRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCollectionIdByNameResponse>,
            tonic::Status,
        >;
        async fn get_collection_name_by_id(
            &self,
            request: tonic::Request<super::GetCollectionNameByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCollectionNameByIdResponse>,
            tonic::Status,
        >;
        /// Vector operations - single
        async fn insert_vector(
            &self,
            request: tonic::Request<super::InsertVectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InsertVectorResponse>,
            tonic::Status,
        >;
        async fn get_vector(
            &self,
            request: tonic::Request<super::GetVectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetVectorResponse>,
            tonic::Status,
        >;
        async fn get_vector_by_client_id(
            &self,
            request: tonic::Request<super::GetVectorByClientIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetVectorByClientIdResponse>,
            tonic::Status,
        >;
        async fn update_vector(
            &self,
            request: tonic::Request<super::UpdateVectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateVectorResponse>,
            tonic::Status,
        >;
        async fn delete_vector(
            &self,
            request: tonic::Request<super::DeleteVectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteVectorResponse>,
            tonic::Status,
        >;
        /// Vector operations - batch
        async fn batch_insert(
            &self,
            request: tonic::Request<super::BatchInsertRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchInsertResponse>,
            tonic::Status,
        >;
        async fn batch_get(
            &self,
            request: tonic::Request<super::BatchGetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchGetResponse>,
            tonic::Status,
        >;
        async fn batch_update(
            &self,
            request: tonic::Request<super::BatchUpdateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchUpdateResponse>,
            tonic::Status,
        >;
        async fn batch_delete(
            &self,
            request: tonic::Request<super::BatchDeleteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchDeleteResponse>,
            tonic::Status,
        >;
        /// Search operations
        async fn search(
            &self,
            request: tonic::Request<super::SearchRequest>,
        ) -> std::result::Result<tonic::Response<super::SearchResponse>, tonic::Status>;
        async fn batch_search(
            &self,
            request: tonic::Request<super::BatchSearchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchSearchResponse>,
            tonic::Status,
        >;
        /// Index operations
        async fn get_index_stats(
            &self,
            request: tonic::Request<super::GetIndexStatsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIndexStatsResponse>,
            tonic::Status,
        >;
        async fn optimize_index(
            &self,
            request: tonic::Request<super::OptimizeIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OptimizeIndexResponse>,
            tonic::Status,
        >;
        /// Health and status
        async fn health(
            &self,
            request: tonic::Request<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status>;
        async fn readiness(
            &self,
            request: tonic::Request<super::ReadinessRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadinessResponse>,
            tonic::Status,
        >;
        async fn liveness(
            &self,
            request: tonic::Request<super::LivenessRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LivenessResponse>,
            tonic::Status,
        >;
        async fn status(
            &self,
            request: tonic::Request<super::StatusRequest>,
        ) -> std::result::Result<tonic::Response<super::StatusResponse>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct ProximaDbServer<T: ProximaDb> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: ProximaDb> ProximaDbServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ProximaDbServer<T>
    where
        T: ProximaDb,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/proximadb.v1.ProximaDB/CreateCollection" => {
                    #[allow(non_camel_case_types)]
                    struct CreateCollectionSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::CreateCollectionRequest>
                    for CreateCollectionSvc<T> {
                        type Response = super::CreateCollectionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateCollectionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::create_collection(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreateCollectionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/GetCollection" => {
                    #[allow(non_camel_case_types)]
                    struct GetCollectionSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::GetCollectionRequest>
                    for GetCollectionSvc<T> {
                        type Response = super::GetCollectionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetCollectionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::get_collection(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetCollectionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/ListCollections" => {
                    #[allow(non_camel_case_types)]
                    struct ListCollectionsSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::ListCollectionsRequest>
                    for ListCollectionsSvc<T> {
                        type Response = super::ListCollectionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListCollectionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::list_collections(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListCollectionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/DeleteCollection" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteCollectionSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::DeleteCollectionRequest>
                    for DeleteCollectionSvc<T> {
                        type Response = super::DeleteCollectionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteCollectionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::delete_collection(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DeleteCollectionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/ListCollectionIds" => {
                    #[allow(non_camel_case_types)]
                    struct ListCollectionIdsSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::ListCollectionIdsRequest>
                    for ListCollectionIdsSvc<T> {
                        type Response = super::ListCollectionIdsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListCollectionIdsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::list_collection_ids(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListCollectionIdsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/ListCollectionNames" => {
                    #[allow(non_camel_case_types)]
                    struct ListCollectionNamesSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::ListCollectionNamesRequest>
                    for ListCollectionNamesSvc<T> {
                        type Response = super::ListCollectionNamesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListCollectionNamesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::list_collection_names(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListCollectionNamesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/GetCollectionIdByName" => {
                    #[allow(non_camel_case_types)]
                    struct GetCollectionIdByNameSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::GetCollectionIdByNameRequest>
                    for GetCollectionIdByNameSvc<T> {
                        type Response = super::GetCollectionIdByNameResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetCollectionIdByNameRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::get_collection_id_by_name(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetCollectionIdByNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/GetCollectionNameById" => {
                    #[allow(non_camel_case_types)]
                    struct GetCollectionNameByIdSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::GetCollectionNameByIdRequest>
                    for GetCollectionNameByIdSvc<T> {
                        type Response = super::GetCollectionNameByIdResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetCollectionNameByIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::get_collection_name_by_id(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetCollectionNameByIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/InsertVector" => {
                    #[allow(non_camel_case_types)]
                    struct InsertVectorSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::InsertVectorRequest>
                    for InsertVectorSvc<T> {
                        type Response = super::InsertVectorResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InsertVectorRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::insert_vector(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = InsertVectorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/GetVector" => {
                    #[allow(non_camel_case_types)]
                    struct GetVectorSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::GetVectorRequest>
                    for GetVectorSvc<T> {
                        type Response = super::GetVectorResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetVectorRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::get_vector(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetVectorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/GetVectorByClientId" => {
                    #[allow(non_camel_case_types)]
                    struct GetVectorByClientIdSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::GetVectorByClientIdRequest>
                    for GetVectorByClientIdSvc<T> {
                        type Response = super::GetVectorByClientIdResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetVectorByClientIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::get_vector_by_client_id(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetVectorByClientIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/UpdateVector" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateVectorSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::UpdateVectorRequest>
                    for UpdateVectorSvc<T> {
                        type Response = super::UpdateVectorResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateVectorRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::update_vector(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpdateVectorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/DeleteVector" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteVectorSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::DeleteVectorRequest>
                    for DeleteVectorSvc<T> {
                        type Response = super::DeleteVectorResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteVectorRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::delete_vector(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DeleteVectorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/BatchInsert" => {
                    #[allow(non_camel_case_types)]
                    struct BatchInsertSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::BatchInsertRequest>
                    for BatchInsertSvc<T> {
                        type Response = super::BatchInsertResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchInsertRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::batch_insert(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = BatchInsertSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/BatchGet" => {
                    #[allow(non_camel_case_types)]
                    struct BatchGetSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::BatchGetRequest>
                    for BatchGetSvc<T> {
                        type Response = super::BatchGetResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchGetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::batch_get(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = BatchGetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/BatchUpdate" => {
                    #[allow(non_camel_case_types)]
                    struct BatchUpdateSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::BatchUpdateRequest>
                    for BatchUpdateSvc<T> {
                        type Response = super::BatchUpdateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchUpdateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::batch_update(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = BatchUpdateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/BatchDelete" => {
                    #[allow(non_camel_case_types)]
                    struct BatchDeleteSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::BatchDeleteRequest>
                    for BatchDeleteSvc<T> {
                        type Response = super::BatchDeleteResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchDeleteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::batch_delete(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = BatchDeleteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/Search" => {
                    #[allow(non_camel_case_types)]
                    struct SearchSvc<T: ProximaDb>(pub Arc<T>);
                    impl<T: ProximaDb> tonic::server::UnaryService<super::SearchRequest>
                    for SearchSvc<T> {
                        type Response = super::SearchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::search(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SearchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/BatchSearch" => {
                    #[allow(non_camel_case_types)]
                    struct BatchSearchSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::BatchSearchRequest>
                    for BatchSearchSvc<T> {
                        type Response = super::BatchSearchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchSearchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::batch_search(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = BatchSearchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/GetIndexStats" => {
                    #[allow(non_camel_case_types)]
                    struct GetIndexStatsSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::GetIndexStatsRequest>
                    for GetIndexStatsSvc<T> {
                        type Response = super::GetIndexStatsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetIndexStatsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::get_index_stats(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetIndexStatsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/OptimizeIndex" => {
                    #[allow(non_camel_case_types)]
                    struct OptimizeIndexSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::OptimizeIndexRequest>
                    for OptimizeIndexSvc<T> {
                        type Response = super::OptimizeIndexResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OptimizeIndexRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::optimize_index(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = OptimizeIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/Health" => {
                    #[allow(non_camel_case_types)]
                    struct HealthSvc<T: ProximaDb>(pub Arc<T>);
                    impl<T: ProximaDb> tonic::server::UnaryService<super::HealthRequest>
                    for HealthSvc<T> {
                        type Response = super::HealthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HealthRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::health(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = HealthSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/Readiness" => {
                    #[allow(non_camel_case_types)]
                    struct ReadinessSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::ReadinessRequest>
                    for ReadinessSvc<T> {
                        type Response = super::ReadinessResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReadinessRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::readiness(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ReadinessSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/Liveness" => {
                    #[allow(non_camel_case_types)]
                    struct LivenessSvc<T: ProximaDb>(pub Arc<T>);
                    impl<
                        T: ProximaDb,
                    > tonic::server::UnaryService<super::LivenessRequest>
                    for LivenessSvc<T> {
                        type Response = super::LivenessResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LivenessRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::liveness(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = LivenessSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proximadb.v1.ProximaDB/Status" => {
                    #[allow(non_camel_case_types)]
                    struct StatusSvc<T: ProximaDb>(pub Arc<T>);
                    impl<T: ProximaDb> tonic::server::UnaryService<super::StatusRequest>
                    for StatusSvc<T> {
                        type Response = super::StatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProximaDb>::status(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: ProximaDb> Clone for ProximaDbServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: ProximaDb> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: ProximaDb> tonic::server::NamedService for ProximaDbServer<T> {
        const NAME: &'static str = "proximadb.v1.ProximaDB";
    }
}
