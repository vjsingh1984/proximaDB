# Container deployment on AWS using URL-based storage
[server]
node_id = "vectordb-container-1"
bind_address = "0.0.0.0"
port = 8080
data_dir = "/data"

[storage]
# Container-optimized data directories
data_dirs = ["/data/hot", "/data/warm"]
wal_dir = "/data/wal"
mmap_enabled = true
cache_size_mb = 2048
bloom_filter_bits = 10

[storage.lsm_config]
memtable_size_mb = 128
level_count = 7
compaction_threshold = 4
block_size_kb = 64

# URL-based WAL configuration for containers
[storage.wal_config]
wal_urls = [
    "file:///data/wal",           # Local ephemeral storage for fast writes
    "s3://vectordb-prod-storage/wal"  # S3 backup for durability
]
distribution_strategy = "LoadBalanced"
collection_affinity = true
memory_flush_size_bytes = 1048576
global_flush_threshold = 2097152

# URL-based storage layout optimized for containers
[storage.storage_layout]
[[storage.storage_layout.base_paths]]
base_dir = "file:///data/hot"
instance_id = 1
mount_point = "/data/hot"
[storage.storage_layout.base_paths.disk_type]
NvmeSsd = { max_iops = 3000 }  # Container-optimized IOPS
[storage.storage_layout.base_paths.capacity_config]
max_wal_size_mb = 512
metadata_reserved_mb = 128
warning_threshold_percent = 85.0

[[storage.storage_layout.base_paths]]
base_dir = "file:///data/warm"
instance_id = 2
mount_point = "/data/warm"
[storage.storage_layout.base_paths.disk_type]
SataSsd = { max_iops = 1000 }
[storage.storage_layout.base_paths.capacity_config]
max_wal_size_mb = 256
metadata_reserved_mb = 64
warning_threshold_percent = 85.0

# S3 integration for cold storage and backup
[[storage.storage_layout.base_paths]]
base_dir = "s3://vectordb-prod-storage/cold"
instance_id = 3
[storage.storage_layout.base_paths.disk_type]
CloudStorage = { provider = "AWS" }
[storage.storage_layout.base_paths.capacity_config]
max_wal_size_mb = 128
metadata_reserved_mb = 32
warning_threshold_percent = 90.0

# Filesystem configuration for container environment
[storage.filesystem_config]
enable_write_strategy_cache = true
temp_strategy = "SameDirectory"

[storage.filesystem_config.atomic_config]
enable_local_atomic = true
enable_object_store_atomic = true
cleanup_temp_on_startup = true

# URL-based metadata backend with S3 durability
[storage.metadata_backend]
backend_type = "filestore"
storage_url = "s3://vectordb-prod-storage/metadata"
cache_size_mb = 64
flush_interval_secs = 30

[storage.metadata_backend.cloud_config.s3_config]
region = "us-east-1"
bucket = "vectordb-prod-storage"
use_iam_role = true

# Container orchestration settings
[container]
# Resource limits appropriate for containerized deployment
max_memory_mb = 4096
max_cpu_cores = 2
ephemeral_storage_gb = 20

# Persistent volume configuration using Kubernetes storage classes
[container.persistent_volumes]
hot_data = { size_gb = 100, storage_class = "gp3", mount_path = "/data/hot" }
warm_data = { size_gb = 500, storage_class = "gp2", mount_path = "/data/warm" }

# Health checks for container orchestration
[container.health_checks]
startup_probe_seconds = 30
liveness_probe_seconds = 10
readiness_probe_seconds = 5

# Monitoring and observability
[monitoring]
metrics_enabled = true
log_level = "info"
prometheus_port = 9090
health_check_port = 8081

[api]
grpc_port = 5679
rest_port = 5678
max_request_size_mb = 32
timeout_seconds = 30
enable_tls = false

# TLS configuration (disabled for internal container communication)
[tls]
enabled = false