# EC2 deployment with multi-region coordination using URL-based storage
[server]
node_id = "vectordb-ec2-primary-1"
bind_address = "0.0.0.0"
port = 8080
data_dir = "/opt/vectordb/data"

[storage]
# Multi-disk data storage using URL-based approach
data_dirs = ["/mnt/nvme0/hot", "/mnt/ssd0/warm", "/mnt/hdd0/cold"]
wal_dir = "/mnt/nvme0/wal"
mmap_enabled = true
cache_size_mb = 8192
bloom_filter_bits = 12

# URL-based WAL configuration with multi-disk distribution
[storage.wal_config]
wal_urls = [
    "file:///mnt/nvme0/wal",      # Ultra-fast NVMe for primary WAL
    "file:///mnt/ssd0/wal",       # SSD for backup WAL
    "file:///mnt/hdd0/wal"        # HDD for archive WAL
]
distribution_strategy = "LoadBalanced"
collection_affinity = true
memory_flush_size_bytes = 1048576
global_flush_threshold = 2097152

# URL-based storage layout
[storage.storage_layout]
[[storage.storage_layout.base_paths]]
base_dir = "file:///mnt/nvme0/storage"
instance_id = 1
mount_point = "/mnt/nvme0"
[storage.storage_layout.base_paths.disk_type]
NvmeSsd = { max_iops = 400000 }
[storage.storage_layout.base_paths.capacity_config]
max_wal_size_mb = 2048
metadata_reserved_mb = 512
warning_threshold_percent = 85.0

[[storage.storage_layout.base_paths]]
base_dir = "file:///mnt/ssd0/storage"
instance_id = 2
mount_point = "/mnt/ssd0"
[storage.storage_layout.base_paths.disk_type]
SataSsd = { max_iops = 16000 }
[storage.storage_layout.base_paths.capacity_config]
max_wal_size_mb = 1024
metadata_reserved_mb = 256
warning_threshold_percent = 85.0

[[storage.storage_layout.base_paths]]
base_dir = "file:///mnt/hdd0/storage"
instance_id = 3
mount_point = "/mnt/hdd0"
[storage.storage_layout.base_paths.disk_type]
Hdd = { rpm = 7200 }
[storage.storage_layout.base_paths.capacity_config]
max_wal_size_mb = 512
metadata_reserved_mb = 128
warning_threshold_percent = 90.0

# Multi-cloud backup using URL-based routing
[storage.filesystem_config]
enable_write_strategy_cache = true
temp_strategy = "SameDirectory"

[storage.filesystem_config.atomic_config]
enable_local_atomic = true
enable_object_store_atomic = true
cleanup_temp_on_startup = true

# URL-based metadata backend with S3 backup
[storage.metadata_backend]
backend_type = "filestore"
storage_url = "file:///mnt/nvme0/metadata"
cache_size_mb = 128
flush_interval_secs = 30

# Optional S3 backup for metadata
[storage.metadata_backend.cloud_config.s3_config]
region = "us-east-1"
bucket = "vectordb-global-metadata"
use_iam_role = true

# Global coordination for multi-region
[global_coordination]
deployment_topology = "MultiRegionActiveActive"

[global_coordination.deployment_topology.MultiRegionActiveActive.regions.us_east_1]
region_id = "us-east-1"
availability_zones = ["us-east-1a", "us-east-1b", "us-east-1c"]
capacity_weight = 1.0
latency_zone = "UltraLow"
disaster_recovery_tier = "Primary"

[global_coordination.deployment_topology.MultiRegionActiveActive.regions.us_west_2]
region_id = "us-west-2"
availability_zones = ["us-west-2a", "us-west-2b", "us-west-2c"]
capacity_weight = 0.8
latency_zone = "Low"
disaster_recovery_tier = "Hot"

[global_coordination.deployment_topology.MultiRegionActiveActive.regions.eu_west_1]
region_id = "eu-west-1"
availability_zones = ["eu-west-1a", "eu-west-1b", "eu-west-1c"]
capacity_weight = 0.6
latency_zone = "Medium"
disaster_recovery_tier = "Warm"

[global_coordination.deployment_topology.MultiRegionActiveActive.global_load_balancing]
strategy = "Weighted"

[global_coordination.deployment_topology.MultiRegionActiveActive.global_load_balancing.Weighted]
latency_weight = 0.6
capacity_weight = 0.3
cost_weight = 0.1

[global_coordination.deployment_topology.MultiRegionActiveActive.data_locality_rules]

[global_coordination.deployment_topology.MultiRegionActiveActive.data_locality_rules.residency_rules.eu_customers]
tenant_pattern = "eu_.*"
allowed_regions = ["eu-west-1", "eu-central-1"]
prohibited_regions = ["us-east-1", "us-west-2"]
encryption_required = true
audit_logging = true

[global_coordination.consistency_model]
type = "Session"

[global_coordination.replication_strategy]
type = "Quorum"

[global_coordination.replication_strategy.Quorum]
read_quorum = 2
write_quorum = 2
total_replicas = 3

[global_coordination.conflict_resolution]
type = "VectorClock"

# Metadata sharding for global scale
[global_coordination.metadata_sharding]
sharding_strategy = "Hierarchical"
shard_count = 64

[global_coordination.metadata_sharding.sharding_strategy.Hierarchical]
tenant_shards = 16
collection_shards_per_tenant = 4

[global_coordination.metadata_sharding.rebalancing]
enabled = true
trigger_threshold = 0.2
rebalancing_strategy = "LoadThreshold"
migration_rate_limit = 200

[global_coordination.metadata_sharding.rebalancing.rebalancing_strategy.LoadThreshold]
cpu_threshold = 0.8
memory_threshold = 0.8

[global_coordination.metadata_sharding.hot_shard_detection]
detection_enabled = true
cpu_threshold = 0.9
memory_threshold = 0.9
request_rate_threshold = 5000.0
mitigation_strategies = ["ScaleOut", "TenantIsolation", "AggressiveCaching"]

# Advanced routing for global deployment
[routing.geographic_routing]
enabled = true
latency_routing = true

[routing.geographic_routing.regions.us_east_1]
clusters = ["us-east-1-cluster-1", "us-east-1-cluster-2"]
primary = true
latency_weight = 1.0
capacity_weight = 1.0

[routing.geographic_routing.regions.eu_west_1]
clusters = ["eu-west-1-cluster-1"]
primary = false
latency_weight = 0.8
capacity_weight = 0.6

[routing.geographic_routing.data_residency_rules]
eu_customers = ["eu-west-1", "eu-central-1"]
us_customers = ["us-east-1", "us-west-2"]

# Disaster recovery configuration
[global_coordination.disaster_recovery]
enabled = true
rto_seconds = 300
rpo_seconds = 60

[global_coordination.disaster_recovery.backup_strategy]
type = "Hybrid"
continuous_retention_hours = 72
snapshot_frequency_hours = 6
long_term_retention_days = 2555  # 7 years

[global_coordination.disaster_recovery.failover_automation]
enabled = true
health_check_interval_seconds = 30
failure_threshold_count = 3
automatic_failback = false
notification_channels = ["slack", "pagerduty", "email"]

[global_coordination.disaster_recovery.testing_schedule]
enabled = true
frequency_days = 30
test_type = "NonDisruptive"
rollback_testing = true