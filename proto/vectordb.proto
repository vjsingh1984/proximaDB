syntax = "proto3";

package vectordb.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

service VectorDB {
  // Collection management
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse);
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse);
  rpc DeleteCollection(DeleteCollectionRequest) returns (DeleteCollectionResponse);
  
  // Vector operations
  rpc Insert(InsertRequest) returns (InsertResponse);
  rpc Search(SearchRequest) returns (SearchResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  
  // Batch operations
  rpc BatchInsert(BatchInsertRequest) returns (BatchInsertResponse);
  rpc BatchGet(BatchGetRequest) returns (BatchGetResponse);
  
  // Health and status
  rpc Health(HealthRequest) returns (HealthResponse);
  rpc Status(StatusRequest) returns (StatusResponse);
}

message CreateCollectionRequest {
  string collection_id = 1;
  string name = 2;
  uint32 dimension = 3;
  SchemaType schema_type = 4;
  google.protobuf.Struct schema = 5;
}

message CreateCollectionResponse {
  bool success = 1;
  string message = 2;
}

message ListCollectionsRequest {}

message ListCollectionsResponse {
  repeated Collection collections = 1;
}

message DeleteCollectionRequest {
  string collection_id = 1;
}

message DeleteCollectionResponse {
  bool success = 1;
  string message = 2;
}

message InsertRequest {
  string collection_id = 1;
  VectorRecord record = 2;
}

message InsertResponse {
  bool success = 1;
  string vector_id = 2;
  string message = 3;
}

message SearchRequest {
  string collection_id = 1;
  repeated float vector = 2;
  uint32 k = 3;
  google.protobuf.Struct filters = 4;
  optional float threshold = 5;
}

message SearchResponse {
  repeated SearchResult results = 1;
  uint32 total_count = 2;
}

message GetRequest {
  string collection_id = 1;
  string vector_id = 2;
}

message GetResponse {
  optional VectorRecord record = 1;
}

message DeleteRequest {
  string collection_id = 1;
  string vector_id = 2;
}

message DeleteResponse {
  bool success = 1;
  string message = 2;
}

message BatchInsertRequest {
  string collection_id = 1;
  repeated VectorRecord records = 2;
}

message BatchInsertResponse {
  uint32 inserted_count = 1;
  repeated string vector_ids = 2;
  repeated string errors = 3;
}

message BatchGetRequest {
  string collection_id = 1;
  repeated string vector_ids = 2;
}

message BatchGetResponse {
  repeated VectorRecord records = 1;
}

message HealthRequest {}

message HealthResponse {
  string status = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message StatusRequest {}

message StatusResponse {
  string node_id = 1;
  string version = 2;
  NodeRole role = 3;
  ClusterInfo cluster = 4;
  StorageInfo storage = 5;
}

message Collection {
  string id = 1;
  string name = 2;
  uint32 dimension = 3;
  SchemaType schema_type = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  uint64 vector_count = 7;
}

message VectorRecord {
  string id = 1;
  string collection_id = 2;
  repeated float vector = 3;
  google.protobuf.Struct metadata = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message SearchResult {
  string id = 1;
  float score = 2;
  google.protobuf.Struct metadata = 3;
}

message ClusterInfo {
  repeated string peers = 1;
  string leader = 2;
  uint64 term = 3;
}

message StorageInfo {
  uint64 total_vectors = 1;
  uint64 total_size_bytes = 2;
  repeated DiskInfo disks = 3;
}

message DiskInfo {
  string path = 1;
  uint64 total_bytes = 2;
  uint64 used_bytes = 3;
  uint64 available_bytes = 4;
}

enum SchemaType {
  SCHEMA_TYPE_UNSPECIFIED = 0;
  SCHEMA_TYPE_DOCUMENT = 1;
  SCHEMA_TYPE_RELATIONAL = 2;
}

enum NodeRole {
  NODE_ROLE_UNSPECIFIED = 0;
  NODE_ROLE_LEADER = 1;
  NODE_ROLE_FOLLOWER = 2;
  NODE_ROLE_CANDIDATE = 3;
}