@startuml axis-architecture
!theme cerulean-outline
skinparam backgroundColor #F8F9FA

title AXIS - Adaptive eXtensible Indexing System

package "AXIS Core Components" as axis_core {
  
  rectangle "Global ID Index" as global_id #FF6B6B {
    component [Trie Structure] as trie
    component [HashMap O(1)] as hashmap
    component [Location Mapping] as location
    note bottom : id → {partition_id, offset}\nPrefix queries support
  }
  
  rectangle "Metadata Index" as metadata_idx #4ECDC4 {
    component [Parquet Columnar] as parquet_meta
    component [Roaring Bitmaps] as bitmaps
    component [Predicate Pushdown] as predicate
    note bottom : metadata.field = "value"\n→ bitmap → row_ids
  }
  
  rectangle "Dense Vector Index" as dense_idx #45B7D1 {
    component [HNSW Graphs] as hnsw
    component [Product Quantization] as pq
    component [Per-Partition Indexes] as partitions
    note bottom : O(log n) similarity search\nQuantized + Full precision
  }
  
  rectangle "Sparse Vector Index" as sparse_idx #96CEB4 {
    component [LSM Tree] as lsm_sparse
    component [MinHash LSH] as minhash
    component [Count-Min Sketch] as count_min
    note bottom : O(n/b) ANN search\nMemory-efficient storage
  }
  
  rectangle "Join Engine" as join_engine #FFEAA7 {
    component [RowSet Intersection] as intersection
    component [Bloom Filter Cache] as bloom_cache
    component [Priority Queue] as priority_queue
    note bottom : Multi-index result merging\nFalse-positive rejection
  }
}

package "Adaptive Intelligence" as adaptive {
  component [Collection Analyzer] as analyzer
  component [Query Pattern Monitor] as query_monitor
  component [Performance Optimizer] as perf_optimizer
  component [Index Strategy Selector] as strategy_selector
}

package "Migration Engine" as migration {
  component [Migration Planner] as planner
  component [Zero-Downtime Migrator] as migrator
  component [Rollback Manager] as rollback
  component [Performance Validator] as validator
}

package "Query Execution Flow" as query_flow {
  rectangle "Query Processing" as query_proc {
    component [Hybrid Query Input] as Query
    component [Metadata Filtering] as Meta
    component [Vector Similarity] as Vector
    component [Result Intersection] as Join_Step
    component [Ranking & Output] as Rank
  }
}

' AXIS component interactions
global_id --> join_engine : "ID → Location"
metadata_idx --> join_engine : "Filtered Row IDs"
dense_idx --> join_engine : "Dense Results"
sparse_idx --> join_engine : "Sparse Results"

' Adaptive intelligence connections
analyzer --> strategy_selector : "Collection\nCharacteristics"
query_monitor --> perf_optimizer : "Query Patterns"
perf_optimizer --> migration : "Optimization\nRecommendations"

' Migration flow
planner --> migrator : "Migration Plan"
migrator --> validator : "Performance\nValidation"
validator --> rollback : "Rollback if\nNeeded"

' Query execution flow
Query --> Meta : "1. Apply metadata filters"
Meta --> Vector : "2. Vector similarity search"
Vector --> Join_Step : "3. Intersect results"
Join_Step --> Rank : "4. Rank and return"

' Adaptive feedback loops
join_engine --> query_monitor : "Query performance\nmetrics"
strategy_selector --> migration : "Strategy change\nrecommendations"

note as competitive_advantages
**AXIS Competitive Advantages**
• **Unified Indexing**: Dense + Sparse vectors in single system
• **Adaptive Strategy**: ML-driven index optimization
• **Zero-Downtime Migration**: Live index evolution
• **Multi-Index Joins**: Bloom-optimized result intersection
• **Prefix Queries**: Trie-based ID search capabilities
end note

note as performance_characteristics
**Performance Characteristics**
• **Exact ID Lookup**: O(1) HashMap access
• **Prefix Search**: O(k) Trie traversal
• **Metadata Filter**: O(1) Bitmap lookup
• **ANN Search**: O(log n) HNSW, O(n/b) MinHash
• **Join Operations**: O(r₁ + r₂) intersection
end note

@enduml