@startuml
!theme plain
title ProximaDB Storage Policy Architecture

package "Storage Policy System" {
    class StoragePolicy {
        +collection_name: String
        +primary_storage: String
        +secondary_storage: Option<String>
        +archive_storage: Option<String>
        +wal_storage: String
        +metadata_storage: String
        +index_storage: String
        +lifecycle: StorageLifecycle
    }

    class StorageLifecycle {
        +hot_duration: Duration
        +warm_duration: Duration
        +archive_after: Duration
        +delete_after: Option<Duration>
        +access_pattern_override: bool
    }
}

package "Filesystem Backends" {
    interface FileSystem {
        +scheme(): &str
        +read(path: &Path): Result<Vec<u8>>
        +write(path: &Path, data: &[u8]): Result<()>
        +list(prefix: &Path): Result<Vec<PathInfo>>
        +delete(path: &Path): Result<()>
        +exists(path: &Path): Result<bool>
    }

    class LocalFileSystem {
        +root_path: PathBuf
        --
        file:///mnt/nvme/vectors
        file:///mnt/ssd/indexes
        file:///mnt/hdd/archive
    }

    class S3FileSystem {
        +bucket: String
        +client: S3Client
        --
        s3://bucket/vectors
        s3://bucket/archive?class=GLACIER
    }

    class AzureFileSystem {
        +account: String
        +container: String
        +client: AzureClient
        --
        adls://account/container/vectors
        adls://account/container/archive?tier=COOL
    }

    class GcsFileSystem {
        +bucket: String
        +client: GcsClient
        --
        gcs://bucket/vectors
        gcs://bucket/archive?class=ARCHIVE
    }

    FileSystem <|-- LocalFileSystem
    FileSystem <|-- S3FileSystem
    FileSystem <|-- AzureFileSystem
    FileSystem <|-- GcsFileSystem
}

package "Storage Manager" {
    class FilesystemFactory {
        +from_url(url: &str): Result<Box<dyn FileSystem>>
        +register_backend(scheme: &str, factory: BackendFactory)
    }

    class StorageLayoutHandler {
        +filesystem: Box<dyn FileSystem>
        +layout: StorageLayout
        +policy: StoragePolicy
        --
        +write_parquet(data: RecordBatch): Result<String>
        +read_parquet(path: &str): Result<RecordBatch>
        +move_to_tier(from: &str, to: &str): Result<()>
    }
}

StoragePolicy --> StorageLifecycle
StorageLayoutHandler --> StoragePolicy
StorageLayoutHandler --> FileSystem
FilesystemFactory --> FileSystem

note right of StoragePolicy
  Example Configuration:
  primary: "file:///mnt/nvme/vectors"
  secondary: "s3://bucket/warm-data"
  archive: "s3://bucket/archive?class=GLACIER"
  wal: "file:///mnt/ssd/wal"
  metadata: "file:///mnt/ssd/metadata"
  index: "file:///mnt/nvme/indexes"
end note

@enduml