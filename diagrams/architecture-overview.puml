@startuml
!theme aws-orange
!include <C4/C4_Container>

title VectorFlow - High-Level Architecture Overview

Person(developer, "AI Developer", "Building RAG applications")
Person(enterprise, "Enterprise User", "Analyzing SEC filings")

System_Boundary(vectorflow, "VectorFlow Cloud-Native Vector Database") {
    Container(api_gateway, "API Gateway", "gRPC/REST", "Request routing, authentication, rate limiting")
    
    Container_Boundary(compute, "Serverless Compute Layer") {
        Container(query_service, "Query Service", "Rust/Tokio", "Vector similarity search, k-NN queries")
        Container(ingest_service, "Ingest Service", "Rust/Tokio", "Vector ingestion, batch processing")
        Container(admin_service, "Admin Service", "Rust/Tokio", "Collection management, monitoring")
    }
    
    Container_Boundary(storage_tier, "Intelligent Storage Tiers") {
        Container(hot_tier, "Hot Tier", "MMAP/NVMe", "Sub-ms latency\n(Recently accessed)")
        Container(warm_tier, "Warm Tier", "Local SSD", "Low latency\n(Occasionally accessed)")
        Container(cold_tier, "Cold Tier", "S3/Blob Storage", "Cost-optimized\n(Rarely accessed)")
        Container(archive_tier, "Archive Tier", "Glacier/Archive", "Long-term retention\n(Compliance)")
    }
    
    Container(metadata_store, "Global Metadata Store", "Distributed", "Tenant configs, schemas, routing tables")
    Container(cache_layer, "Distributed Cache", "Redis/Hazelcast", "Query results, frequently accessed vectors")
    
    Container_Boundary(background, "Background Services") {
        Container(migration_engine, "Data Migration", "Rust", "Automatic tier movement")
        Container(compaction_service, "LSM Compaction", "Rust", "Storage optimization")
        Container(monitoring, "Observability", "OpenTelemetry", "Metrics, logs, traces")
    }
}

System_Ext(ml_platforms, "ML Platforms", "LangChain, LlamaIndex, Databricks")
System_Ext(cloud_services, "Cloud Services", "AWS/Azure/GCP storage and compute")

' Relationships
developer --> api_gateway : "Vector operations\n(Insert, Search, Update)"
enterprise --> api_gateway : "Document analysis\n(SEC filings, compliance)"

api_gateway --> query_service : "Search requests"
api_gateway --> ingest_service : "Data ingestion"
api_gateway --> admin_service : "Management operations"

query_service --> hot_tier : "Frequent data"
query_service --> warm_tier : "Standard data"
query_service --> cold_tier : "Historical data"

query_service --> cache_layer : "Cache lookup"
query_service --> metadata_store : "Routing decisions"

ingest_service --> hot_tier : "New vectors"
migration_engine --> warm_tier : "Automated movement"
migration_engine --> cold_tier : "Cost optimization"
migration_engine --> archive_tier : "Compliance retention"

ml_platforms --> api_gateway : "SDK integration"
storage_tier --> cloud_services : "Object storage\nBlock storage"

note right of hot_tier : "MMAP + OS page cache\n< 1ms p99 latency\nFrequently accessed data"
note right of warm_tier : "Local SSD storage\n< 10ms p99 latency\nOccasionally accessed"
note right of cold_tier : "S3/Blob storage\n< 100ms p99 latency\nCost-optimized"

@enduml