@startuml ProximaDB_Server_Internal_Architecture
!theme plain
skinparam backgroundColor white
skinparam classBackgroundColor lightgreen
skinparam classBorderColor darkgreen
skinparam packageBackgroundColor lightyellow

title ProximaDB Server Internal Architecture - Implementation Analysis

package "Server Entry Point" {
    class MainServer {
        + main()
        + load_config()
        + setup_logging()
        + start_servers()
        
        ' Configuration
        - config: ServerConfig
        - grpc_port: 5679
        - rest_port: 5678
    }
}

package "Network Layer - Protocol Handlers" {
    class MultiServer {
        - shared_services: Arc<SharedServices>
        - grpc_server: ProximaDbService
        - rest_server: RestServer
        
        + new(shared_services)
        + start_both_servers()
        + graceful_shutdown()
    }
    
    package "gRPC Implementation" {
        class ProximaDbService {
            - shared_services: Arc<SharedServices>
            
            ' ‚úÖ IMPLEMENTED
            + collection_operation() ‚Üí CollectionResponse
            + vector_insert() ‚Üí VectorOperationResponse  
            + vector_mutation() ‚Üí VectorOperationResponse
            + vector_search() ‚Üí VectorOperationResponse
            + health() ‚Üí HealthResponse
            + get_metrics() ‚Üí MetricsResponse
            
            ' Implementation details
            - handle_collection_create()
            - handle_collection_get()
            - handle_collection_list()
            - handle_collection_delete()
            - handle_collection_update() [üöß PARTIAL]
            
            - handle_vector_insert_avro()
            - handle_vector_search()
            - handle_vector_mutation_update() [üöß PARTIAL]
            - handle_vector_mutation_delete() [üöß PARTIAL]
        }
        
        note right of ProximaDbService : Uses unified endpoints:\n- CollectionOperation for all collection ops\n- VectorInsert for zero-copy inserts\n- VectorMutation for updates/deletes\n- VectorSearch for similarity search
    }
    
    package "REST Implementation" {
        class RestServer {
            - shared_services: Arc<SharedServices>
            - router: axum::Router
            
            ' ‚úÖ IMPLEMENTED endpoints
            + POST /collections ‚Üí create_collection_handler()
            + GET /collections ‚Üí list_collections_handler()
            + GET /collections/{id} ‚Üí get_collection_handler()
            + DELETE /collections/{id} ‚Üí delete_collection_handler()
            + POST /collections/{id}/vectors ‚Üí insert_vector_handler()
            + POST /collections/{id}/vectors/batch ‚Üí insert_vectors_batch_handler()
            + POST /collections/{id}/search ‚Üí search_vectors_handler()
            + GET /health ‚Üí health_handler()
            
            ' üöß PARTIALLY IMPLEMENTED endpoints
            + GET /collections/{id}/vectors/{vid} ‚Üí get_vector_handler() [STUB]
            + PUT /collections/{id}/vectors/{vid} ‚Üí update_vector_handler() [STUB]
            + DELETE /collections/{id}/vectors/{vid} ‚Üí delete_vector_handler() [STUB]
            
            ' ‚ùå MISSING endpoints (need implementation)
            - PATCH /collections/{id}
            - DELETE /collections/{id}/vectors + filter
            - GET /collections/{id}/vectors/{vid}/history
            - POST /collections/{id}/multi_search
            - POST /collections/{id}/search_aggregated
            - POST /collections/{id}/vectors/atomic
            - POST /transactions
            - POST /transactions/{id}/commit
            - POST /transactions/{id}/rollback
        }
        
        note bottom of RestServer : REST endpoints map directly to\nshared service methods
    }
}

package "Service Layer - Business Logic" {
    class SharedServices {
        + collection_service: Arc<CollectionService>
        + unified_avro_service: Arc<UnifiedAvroService>
        + transaction_manager: Option<TransactionManager>
        + wal_manager: Arc<WalManager>
        + vector_coordinator: Option<VectorStorageCoordinator>
        
        + new(config) ‚Üí SharedServices
        + get_collection_service()
        + get_unified_avro_service()
        + get_transaction_manager()
    }
    
    package "Collection Management" {
        class CollectionService {
            - metadata_backend: Arc<FilestoreMetadataBackend>
            
            ' ‚úÖ FULLY IMPLEMENTED
            + create_collection_from_grpc() ‚Üí CollectionServiceResponse
            + create_collection_from_rest() ‚Üí CollectionServiceResponse  
            + get_collection() ‚Üí CollectionServiceResponse
            + list_collections() ‚Üí CollectionServiceResponse
            + delete_collection() ‚Üí CollectionServiceResponse
            
            ' üöß PARTIALLY IMPLEMENTED
            + update_collection() ‚Üí CollectionServiceResponse [BASIC]
            
            ' Internal methods
            - validate_collection_config()
            - generate_collection_id()
            - store_collection_metadata()
            - collection_exists()
        }
        
        note right of CollectionService : Handles all collection CRUD\nwith atomic metadata operations
    }
    
    package "Vector Operations" {
        class UnifiedAvroService {
            - wal_manager: Arc<WalManager>
            - vector_coordinator: Option<VectorStorageCoordinator>
            - metadata_backend: Arc<FilestoreMetadataBackend>
            
            ' ‚úÖ FULLY IMPLEMENTED
            + vector_insert_zero_copy() ‚Üí Result<VectorInsertResponse>
            + handle_vector_insert_v2() ‚Üí Result<VectorInsertResponse>
            + search_vectors_simple() ‚Üí Result<SearchResponse>
            + search_by_metadata_server_side() ‚Üí Result<SearchResponse>
            
            ' üöß PARTIALLY IMPLEMENTED  
            + get_vector_by_id() ‚Üí Result<VectorResponse> [STUB]
            + delete_vector_by_id() ‚Üí Result<DeleteResponse> [BASIC]
            + handle_vector_update() ‚Üí Result<UpdateResponse> [BASIC]
            
            ' ‚ùå MISSING IMPLEMENTATIONS
            - delete_vectors_by_filter() ‚Üí Result<DeleteResponse>
            - get_vector_history() ‚Üí Result<HistoryResponse>
            - multi_search() ‚Üí Result<MultiSearchResponse>
            - search_with_aggregations() ‚Üí Result<AggregatedSearchResponse>
            - atomic_insert_vectors() ‚Üí Result<AtomicInsertResponse>
            
            ' Internal methods
            - serialize_to_avro()
            - deserialize_from_avro()
            - write_to_wal()
            - coordinate_storage_write()
        }
        
        note bottom of UnifiedAvroService : Central hub for all vector operations\nwith Avro serialization and WAL integration
    }
    
    package "Transaction Management" {
        class TransactionManager {
            ' ‚ùå NOT IMPLEMENTED - full class missing
            - active_transactions: HashMap<TransactionId, Transaction>
            - transaction_log: TransactionLog
            - lock_manager: LockManager
            
            ' Missing methods that need implementation
            + begin_transaction() ‚Üí TransactionId
            + commit_transaction(id: TransactionId) ‚Üí Result<()>
            + rollback_transaction(id: TransactionId) ‚Üí Result<()>
            + get_transaction_status(id: TransactionId) ‚Üí TransactionStatus
            + acquire_locks(id: TransactionId, resources: Vec<Resource>)
            + release_locks(id: TransactionId)
        }
        
        class Transaction {
            ' ‚ùå NOT IMPLEMENTED
            + id: TransactionId
            + status: TransactionStatus
            + operations: Vec<TransactionOperation>
            + locks: Vec<Lock>
            + created_at: Timestamp
        }
        
        note right of TransactionManager : Complete transaction system\nneeds implementation for ACID operations
    }
}

package "Storage Layer - Data Persistence" {
    package "Write-Ahead Log" {
        class WalManager {
            - wal_writers: HashMap<String, WalWriter>
            - config: WalConfig
            
            ' ‚úÖ FULLY IMPLEMENTED
            + write_vector_insert() ‚Üí Result<WalOffset>
            + write_vector_update() ‚Üí Result<WalOffset>
            + write_vector_delete() ‚Üí Result<WalOffset>
            + write_collection_operation() ‚Üí Result<WalOffset>
            + flush_to_storage() ‚Üí Result<()>
            + recover_from_wal() ‚Üí Result<()>
            
            ' WAL serialization formats
            - serialize_avro() ‚Üí Vec<u8>
            - serialize_bincode() ‚Üí Vec<u8>
            - serialize_json() ‚Üí Vec<u8>
        }
        
        note right of WalManager : High-performance WAL with\nmultiple serialization formats
    }
    
    package "Vector Storage" {
        class VectorStorageCoordinator {
            ' üöß EXISTS BUT NOT INTEGRATED
            - viper_engine: Arc<ViperEngine>
            - index_manager: Arc<IndexManager>
            
            + search_vectors() ‚Üí Result<SearchResults>
            + insert_vectors() ‚Üí Result<()>
            + update_vectors() ‚Üí Result<()>
            + delete_vectors() ‚Üí Result<()>
            + create_collection_storage() ‚Üí Result<()>
        }
        
        class ViperEngine {
            ' ‚úÖ IMPLEMENTED - Parquet-based storage
            + write_parquet_batch() ‚Üí Result<()>
            + read_parquet_batch() ‚Üí Result<VectorBatch>
            + search_compressed_vectors() ‚Üí Result<SearchResults>
            + apply_metadata_filters() ‚Üí Result<FilteredResults>
            + optimize_storage() ‚Üí Result<()>
            
            ' VIPER-specific optimizations
            - compress_vectors()
            - create_parquet_schema()
            - write_metadata_columns()
        }
        
        note bottom of ViperEngine : High-performance vector storage\nwith Parquet compression
    }
    
    package "Metadata Storage" {
        class FilestoreMetadataBackend {
            - filesystem: Arc<dyn FilesystemBackend>
            
            ' ‚úÖ FULLY IMPLEMENTED
            + store_collection_metadata() ‚Üí Result<()>
            + retrieve_collection_metadata() ‚Üí Result<CollectionRecord>
            + list_collections() ‚Üí Result<Vec<CollectionRecord>>
            + delete_collection_metadata() ‚Üí Result<()>
            + collection_exists() ‚Üí Result<bool>
            
            ' Atomic operations
            - write_atomic() ‚Üí Result<()>
            - read_with_retry() ‚Üí Result<Vec<u8>>
        }
        
        package "Filesystem Abstraction" {
            interface FilesystemBackend {
                + read() ‚Üí Result<Vec<u8>>
                + write() ‚Üí Result<()>
                + delete() ‚Üí Result<()>
                + list() ‚Üí Result<Vec<String>>
                + exists() ‚Üí Result<bool>
            }
            
            class LocalFilesystem {
                + read() ‚Üí Result<Vec<u8>>
                + write() ‚Üí Result<()>
                ' Local file operations
            }
            
            class S3Filesystem {
                + read() ‚Üí Result<Vec<u8>>
                + write() ‚Üí Result<()>
                ' AWS S3 operations
            }
            
            class GcsFilesystem {
                + read() ‚Üí Result<Vec<u8>>
                + write() ‚Üí Result<()>
                ' Google Cloud Storage operations
            }
            
            class AzureFilesystem {
                + read() ‚Üí Result<Vec<u8>>
                + write() ‚Üí Result<()>
                ' Azure Blob Storage operations
            }
        }
        
        note bottom of FilesystemBackend : Multi-cloud storage abstraction\nsupports file://, s3://, gcs://, adls://
    }
}

' Relationships
MainServer --> MultiServer : creates
MultiServer --> ProximaDbService : contains
MultiServer --> RestServer : contains
MultiServer --> SharedServices : shares

ProximaDbService --> SharedServices : uses
RestServer --> SharedServices : uses

SharedServices --> CollectionService : contains
SharedServices --> UnifiedAvroService : contains
SharedServices --> TransactionManager : contains
SharedServices --> WalManager : contains

CollectionService --> FilestoreMetadataBackend : uses
UnifiedAvroService --> WalManager : uses
UnifiedAvroService --> VectorStorageCoordinator : uses
UnifiedAvroService --> FilestoreMetadataBackend : uses

VectorStorageCoordinator --> ViperEngine : uses
FilestoreMetadataBackend --> FilesystemBackend : uses

FilesystemBackend <|-- LocalFilesystem
FilesystemBackend <|-- S3Filesystem
FilesystemBackend <|-- GcsFilesystem
FilesystemBackend <|-- AzureFilesystem

' Implementation Status
note top : IMPLEMENTATION STATUS:\n‚úÖ FULLY IMPLEMENTED\nüöß PARTIALLY IMPLEMENTED\n‚ùå NOT IMPLEMENTED

@enduml