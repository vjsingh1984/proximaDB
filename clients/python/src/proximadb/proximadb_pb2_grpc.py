# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import proximadb_pb2 as proximadb__pb2


class ProximaDBStub(object):
    """============================================================================
    ProximaDB gRPC Protocol - Optimized for Zero-Copy and Flexibility
    - Vector INSERT/UPSERT: Avro binary for zero-copy performance
    - Vector UPDATE/DELETE/SEARCH: Regular gRPC for flexibility
    - Collection operations: Single unified endpoint for all metadata operations
    ============================================================================

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CollectionOperation = channel.unary_unary(
                '/proximadb.ProximaDB/CollectionOperation',
                request_serializer=proximadb__pb2.CollectionRequest.SerializeToString,
                response_deserializer=proximadb__pb2.CollectionResponse.FromString,
                )
        self.VectorInsert = channel.unary_unary(
                '/proximadb.ProximaDB/VectorInsert',
                request_serializer=proximadb__pb2.VectorInsertRequest.SerializeToString,
                response_deserializer=proximadb__pb2.VectorOperationResponse.FromString,
                )
        self.VectorMutation = channel.unary_unary(
                '/proximadb.ProximaDB/VectorMutation',
                request_serializer=proximadb__pb2.VectorMutationRequest.SerializeToString,
                response_deserializer=proximadb__pb2.VectorOperationResponse.FromString,
                )
        self.VectorSearch = channel.unary_unary(
                '/proximadb.ProximaDB/VectorSearch',
                request_serializer=proximadb__pb2.VectorSearchRequest.SerializeToString,
                response_deserializer=proximadb__pb2.VectorOperationResponse.FromString,
                )
        self.Health = channel.unary_unary(
                '/proximadb.ProximaDB/Health',
                request_serializer=proximadb__pb2.HealthRequest.SerializeToString,
                response_deserializer=proximadb__pb2.HealthResponse.FromString,
                )
        self.GetMetrics = channel.unary_unary(
                '/proximadb.ProximaDB/GetMetrics',
                request_serializer=proximadb__pb2.MetricsRequest.SerializeToString,
                response_deserializer=proximadb__pb2.MetricsResponse.FromString,
                )


class ProximaDBServicer(object):
    """============================================================================
    ProximaDB gRPC Protocol - Optimized for Zero-Copy and Flexibility
    - Vector INSERT/UPSERT: Avro binary for zero-copy performance
    - Vector UPDATE/DELETE/SEARCH: Regular gRPC for flexibility
    - Collection operations: Single unified endpoint for all metadata operations
    ============================================================================

    """

    def CollectionOperation(self, request, context):
        """Collection management - single unified endpoint for flexibility
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VectorInsert(self, request, context):
        """Vector operations - optimized by use case
        Zero-copy Avro binary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VectorMutation(self, request, context):
        """UPDATE/DELETE via gRPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VectorSearch(self, request, context):
        """Search via gRPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Health(self, request, context):
        """Health and monitoring
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProximaDBServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CollectionOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.CollectionOperation,
                    request_deserializer=proximadb__pb2.CollectionRequest.FromString,
                    response_serializer=proximadb__pb2.CollectionResponse.SerializeToString,
            ),
            'VectorInsert': grpc.unary_unary_rpc_method_handler(
                    servicer.VectorInsert,
                    request_deserializer=proximadb__pb2.VectorInsertRequest.FromString,
                    response_serializer=proximadb__pb2.VectorOperationResponse.SerializeToString,
            ),
            'VectorMutation': grpc.unary_unary_rpc_method_handler(
                    servicer.VectorMutation,
                    request_deserializer=proximadb__pb2.VectorMutationRequest.FromString,
                    response_serializer=proximadb__pb2.VectorOperationResponse.SerializeToString,
            ),
            'VectorSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.VectorSearch,
                    request_deserializer=proximadb__pb2.VectorSearchRequest.FromString,
                    response_serializer=proximadb__pb2.VectorOperationResponse.SerializeToString,
            ),
            'Health': grpc.unary_unary_rpc_method_handler(
                    servicer.Health,
                    request_deserializer=proximadb__pb2.HealthRequest.FromString,
                    response_serializer=proximadb__pb2.HealthResponse.SerializeToString,
            ),
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=proximadb__pb2.MetricsRequest.FromString,
                    response_serializer=proximadb__pb2.MetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proximadb.ProximaDB', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProximaDB(object):
    """============================================================================
    ProximaDB gRPC Protocol - Optimized for Zero-Copy and Flexibility
    - Vector INSERT/UPSERT: Avro binary for zero-copy performance
    - Vector UPDATE/DELETE/SEARCH: Regular gRPC for flexibility
    - Collection operations: Single unified endpoint for all metadata operations
    ============================================================================

    """

    @staticmethod
    def CollectionOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proximadb.ProximaDB/CollectionOperation',
            proximadb__pb2.CollectionRequest.SerializeToString,
            proximadb__pb2.CollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VectorInsert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proximadb.ProximaDB/VectorInsert',
            proximadb__pb2.VectorInsertRequest.SerializeToString,
            proximadb__pb2.VectorOperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VectorMutation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proximadb.ProximaDB/VectorMutation',
            proximadb__pb2.VectorMutationRequest.SerializeToString,
            proximadb__pb2.VectorOperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VectorSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proximadb.ProximaDB/VectorSearch',
            proximadb__pb2.VectorSearchRequest.SerializeToString,
            proximadb__pb2.VectorOperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proximadb.ProximaDB/Health',
            proximadb__pb2.HealthRequest.SerializeToString,
            proximadb__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proximadb.ProximaDB/GetMetrics',
            proximadb__pb2.MetricsRequest.SerializeToString,
            proximadb__pb2.MetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
