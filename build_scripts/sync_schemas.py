#!/usr/bin/env python3
"""
Schema Synchronization Script

Ensures that client SDK and WAL use the exact same Avro schemas to prevent drift.
This script copies the core schema to all locations that need it.
"""

import os
import json
import shutil
from pathlib import Path

def main():
    """Synchronize Avro schemas across all components"""
    
    # Source schema (single source of truth)
    source_schema = Path("schemas/proximadb_core.avsc")
    
    if not source_schema.exists():
        print(f"‚ùå Source schema not found: {source_schema}")
        return 1
    
    print(f"üìã Synchronizing schemas from {source_schema}")
    
    # Validate source schema
    try:
        with open(source_schema, 'r') as f:
            schema_data = json.load(f)
        print(f"‚úÖ Source schema is valid JSON")
    except json.JSONDecodeError as e:
        print(f"‚ùå Source schema is invalid JSON: {e}")
        return 1
    
    # Target locations for schema distribution
    targets = [
        # Python client SDK
        "clients/python/src/proximadb/schemas/proximadb_core.avsc",
        
        # Rust WAL (will be read by build.rs)
        "src/storage/wal/schemas/proximadb_core.avsc",
        
        # Documentation
        "docs/schemas/proximadb_core.avsc",
        
        # Test fixtures
        "tests/fixtures/schemas/proximadb_core.avsc",
    ]
    
    success_count = 0
    
    for target in targets:
        target_path = Path(target)
        
        # Create parent directories if needed
        target_path.parent.mkdir(parents=True, exist_ok=True)
        
        try:
            # Copy schema file
            shutil.copy2(source_schema, target_path)
            print(f"‚úÖ Copied to {target}")
            success_count += 1
        except Exception as e:
            print(f"‚ùå Failed to copy to {target}: {e}")
    
    # Generate Python schema constants
    generate_python_constants(schema_data)
    
    # Generate Rust schema constants  
    generate_rust_constants(schema_data)
    
    print(f"\nüéØ Schema synchronization complete: {success_count}/{len(targets)} targets updated")
    
    # Validate synchronized schemas
    validate_synchronized_schemas(targets)
    
    return 0

def generate_python_constants(schema_data):
    """Generate Python constants for schema validation"""
    
    python_constants = f'''"""
Auto-generated schema constants for ProximaDB
DO NOT EDIT MANUALLY - Generated by build_scripts/sync_schemas.py
"""

SCHEMA_VERSION = 1
CORE_SCHEMA_NAMESPACE = "{schema_data.get('namespace', 'ai.proximadb.core')}"

# Schema type names
VECTOR_RECORD_SCHEMA = "VectorRecord"
SEARCH_RESULT_SCHEMA = "SearchResult"
COLLECTION_CONFIG_SCHEMA = "CollectionConfig"
BATCH_REQUEST_SCHEMA = "BatchRequest"
OPERATION_RESULT_SCHEMA = "OperationResult"

# Required fields for validation
VECTOR_RECORD_REQUIRED = ["vector"]
SEARCH_RESULT_REQUIRED = ["score"]
COLLECTION_CONFIG_REQUIRED = ["name", "dimension"]

# Optional fields with defaults
VECTOR_RECORD_DEFAULTS = {{
    "id": None,
    "metadata": None,
    "timestamp": None,
    "version": 1,
    "expires_at": None
}}

SEARCH_RESULT_DEFAULTS = {{
    "id": None,
    "vector": None,
    "metadata": None,
    "rank": None
}}
'''
    
    target_file = Path("clients/python/src/proximadb/schema_constants.py")
    target_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(target_file, 'w') as f:
        f.write(python_constants)
    
    print(f"‚úÖ Generated Python constants: {target_file}")

def generate_rust_constants(schema_data):
    """Generate Rust constants for schema validation"""
    
    rust_constants = f'''// Auto-generated schema constants for ProximaDB
// DO NOT EDIT MANUALLY - Generated by build_scripts/sync_schemas.py

pub const SCHEMA_VERSION: u32 = 1;
pub const CORE_SCHEMA_NAMESPACE: &str = "{schema_data.get('namespace', 'ai.proximadb.core')}";

// Schema type names
pub const VECTOR_RECORD_SCHEMA: &str = "VectorRecord";
pub const SEARCH_RESULT_SCHEMA: &str = "SearchResult";
pub const COLLECTION_CONFIG_SCHEMA: &str = "CollectionConfig";
pub const BATCH_REQUEST_SCHEMA: &str = "BatchRequest";
pub const OPERATION_RESULT_SCHEMA: &str = "OperationResult";

// Schema file path (relative to project root)
pub const CORE_SCHEMA_PATH: &str = "schemas/proximadb_core.avsc";
'''
    
    target_file = Path("src/schema_constants.rs")
    target_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(target_file, 'w') as f:
        f.write(rust_constants)
    
    print(f"‚úÖ Generated Rust constants: {target_file}")

def validate_synchronized_schemas(targets):
    """Validate that all synchronized schemas are identical"""
    
    print("\nüîç Validating synchronized schemas...")
    
    source_content = None
    with open("schemas/proximadb_core.avsc", 'r') as f:
        source_content = f.read()
    
    all_valid = True
    
    for target in targets:
        target_path = Path(target)
        
        if not target_path.exists():
            print(f"‚ùå Target schema missing: {target}")
            all_valid = False
            continue
        
        try:
            with open(target_path, 'r') as f:
                target_content = f.read()
            
            if source_content == target_content:
                print(f"‚úÖ Schema synchronized: {target}")
            else:
                print(f"‚ùå Schema drift detected: {target}")
                all_valid = False
                
        except Exception as e:
            print(f"‚ùå Failed to validate {target}: {e}")
            all_valid = False
    
    if all_valid:
        print("üéØ All schemas are synchronized!")
    else:
        print("‚ö†Ô∏è Schema drift detected - schemas are not identical!")
        
    return all_valid

if __name__ == "__main__":
    exit(main())