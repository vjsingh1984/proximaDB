@startuml ProximaDB_Complete_System_Architecture
!theme aws-orange
title ProximaDB - Complete System Architecture

skinparam packageStyle rectangle
skinparam component {
    BackgroundColor LightBlue
    BorderColor Navy
    FontColor Navy
}

skinparam database {
    BackgroundColor LightGreen
    BorderColor DarkGreen
}

skinparam cloud {
    BackgroundColor LightYellow
    BorderColor Orange
}

' Client Layer
package "Client Applications" <<Rectangle>> {
    component [Python SDK\n(Auto Protocol)] as python_sdk
    component [REST Clients\n(Web/Mobile)] as rest_clients
    component [gRPC Clients\n(High Performance)] as grpc_clients
    component [Future SDKs\n(JS, Rust, Java)] as future_sdks
}

' Load Balancer and Gateway
package "API Gateway" <<Rectangle>> {
    component [Load Balancer\n(Nginx/Envoy)] as lb
    component [TLS Termination] as tls
    component [Rate Limiting] as rate_limit
}

' ProximaDB Server
package "ProximaDB Core" <<Rectangle>> {
    component [REST Server\nPort 5678] as rest_server
    component [gRPC Server\nPort 5679] as grpc_server
    component [Protocol Router] as router
}

' Service Layer
package "Service Layer" <<Rectangle>> {
    component [UnifiedAvroService\n(Central Operations)] as unified_service
    component [CollectionService\n(Collection Management)] as collection_service
    component [Assignment Service\n(Multi-Disk Distribution)] as assignment_service
}

' Storage Layer
package "Storage Layer" <<Rectangle>> {
    database "WAL System\n(Write-Ahead Logging)" as wal {
        component [Avro Strategy] as avro_wal
        component [Bincode Strategy] as bincode_wal
        component [Memtable (ART)] as memtable
    }
    
    database "VIPER Engine\n(Vector Storage)" as viper {
        component [Parquet Writer] as parquet
        component [Compression (LZ4/Snappy)] as compression
        component [SIMD Optimization] as simd
        component [Memory Mapping] as mmap
    }
    
    database "Metadata Store\n(Collection Config)" as metadata
}

' Indexing System
package "AXIS Indexing" <<Rectangle>> {
    component [HNSW Index\n(85% Complete)] as hnsw
    component [IVF Index\n(Planned)] as ivf
    component [Flat Index\n(Complete)] as flat
    component [Adaptive Selection] as adaptive
}

' Storage Backends
cloud "Multi-Cloud Storage" <<Cloud>> {
    component [Local Filesystem\nfile://] as local_fs
    component [AWS S3\ns3://] as s3
    component [Azure Blob\nadls://] as azure
    component [Google Cloud\ngcs://] as gcs
}

' Monitoring
package "Observability" <<Rectangle>> {
    component [Health Endpoints] as health
    component [Metrics (Prometheus)] as metrics
    component [Distributed Tracing] as tracing
}

' Connections
python_sdk --> lb : HTTPS/gRPC
rest_clients --> lb : HTTPS
grpc_clients --> lb : gRPC/TLS
future_sdks --> lb : Various

lb --> tls
lb --> rate_limit
tls --> rest_server
tls --> grpc_server

rest_server --> router
grpc_server --> router
router --> unified_service

unified_service --> collection_service
unified_service --> assignment_service
unified_service --> wal

collection_service --> metadata
assignment_service --> wal
assignment_service --> viper

wal --> memtable
wal --> avro_wal
wal --> bincode_wal
wal ..> viper : "Direct Flush\n(Optimized 2025)"

viper --> parquet
viper --> compression
viper --> simd
viper --> mmap

unified_service --> hnsw
hnsw --> adaptive
ivf --> adaptive
flat --> adaptive

wal --> local_fs
wal --> s3
wal --> azure
wal --> gcs

viper --> local_fs
viper --> s3
viper --> azure
viper --> gcs

metadata --> local_fs

router --> health
unified_service --> metrics
wal --> metrics
viper --> metrics

note right of wal
  **WAL → VIPER Optimization**
  Direct flush eliminates coordinator
  bottleneck for 85% performance gain
end note

note right of viper
  **VIPER Features**
  • Parquet columnar storage
  • SIMD acceleration
  • Memory mapping
  • Multi-cloud support
end note

note bottom of local_fs
  **Multi-Cloud Configuration**
  collections_url = "s3://bucket/collections/"
  wal_url = "file:///data/wal"
end note

@enduml